<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OC | HuanLiu's Blog]]></title>
  <link href="http://MrBoog.github.io/blog/categories/oc/atom.xml" rel="self"/>
  <link href="http://MrBoog.github.io/"/>
  <updated>2015-09-10T14:21:32+08:00</updated>
  <id>http://MrBoog.github.io/</id>
  <author>
    <name><![CDATA[HuanLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-c中的'@']]></title>
    <link href="http://MrBoog.github.io/blog/2014/04/13/objective-czhong-de-at/"/>
    <updated>2014-04-13T13:56:34+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/04/13/objective-czhong-de-at</id>
    <content type="html"><![CDATA[<p>在学习和使用Objective-c语言的时候，我们随处可见'@&lsquo;符号，这和其他语言有很大不同。</p>

<p>由于c、c++本身没有'@&lsquo;，Oc这样设计可能是为了更好地和c、c++混编。正如<a href="http://stackoverflow.com/a/25784">这篇文章</a>所提到的。不过&rsquo;@&lsquo;的用途多种多样，我感觉还是需要整理一下。</p>

<p>网上Steffen Itterheim的<a href="http://www.learn-cocos2d.com/2011/10/complete-list-objectivec-20-compiler-directives/">这篇文章</a>基本把大部分用到'@&lsquo;的部分罗列了。</p>

<ul>
<li>@class</li>
<li>@defs</li>
<li>@protocol @required @optional @end</li>
<li>@interface @public @package @protected @private @property @end</li>
<li>@implementation @synthesize @dynamic @end</li>
<li>@throw @try @catch @finally</li>
<li>@synchronized @autoreleasepool</li>
<li>@selector @encode</li>
<li>@compatibility_alias  （给某个类起别名）</li>
<li>@&ldquo;string&rdquo;</li>
<li>@&lsquo;a&rsquo;  @1  @YES</li>
<li>@[]</li>
<li>@{}</li>
<li>@()</li>
</ul>


<p>以上涉及的这些，有的十分常见，也有的我们可能这辈子都用不到。下面，我们就给几个不常见的，或者比较重要的并且容易忽视的用法，总结一下。</p>

<p>1 @compatibility_alias</p>

<p>关于@compatibility_alias的用法，Mattt Thompson大大举过很好的<a href="http://nshipster.com/at-compiler-directives/">示例</a>。在iOS5下想使用collectionView的效果，无疑<a href="https://github.com/ptshih/PSCollectionView">PSTCollectionView</a> 是最佳的替代方案，下面的代码，可以为PSTCollectView起个别名。这样在iOS5我们也可以制造出使用UICollectionView的幻觉，重点是以后升级可以省去很多麻烦：</p>

<pre><code>    #if __IPHONE_OS_VERSION_MAX_ALLOWED &lt; 60000 
    @compatibility_alias UICollectionViewController PSTCollectionViewController;        
    @compatibility_alias UICollectionView PSTCollectionView;    
    @compatibility_alias UICollectionReusableView PSTCollectionReusableView;    
    @compatibility_alias UICollectionViewCell PSTCollectionViewCell;    
    @compatibility_alias UICollectionViewLayout PSTCollectionViewLayout;    
    @compatibility_alias UICollectionViewFlowLayout PSTCollectionViewFlowLayout;    
    @compatibility_alias UICollectionViewLayoutAttributes     PSTCollectionViewLayoutAttributes;        
    @protocol UICollectionViewDataSource &lt;PSTCollectionViewDataSource&gt; @end     
    @protocol UICollectionViewDelegate &lt;PSTCollectionViewDelegate&gt; @end             
 #endif 
</code></pre>

<p>2 Object Literals</p>

<p> 2012年苹果加入了如下字面值，简化了代码。</p>

<p> NSArray Literal： @[ ]</p>

<pre><code>    NSArray * array = @[ @1, @"b", @YES];       
    id str = array[0];      
</code></pre>

<p> NSDictionary Literal:  @{ }</p>

<pre><code>    NSDictionary * dict = @{ @"key1" : @"obj1", @"key2" : @"obj2"}; 
    id obj1 = dict[@"key1"];        
</code></pre>

<p> NSNumber Literal:</p>

<pre><code>    NSNumber * number = @'a';//([NSNumber numberWithChar:'a'])          
    NSNumber * number = @1;//([NSNumber numberWithInt:1])       
    NSNumber * number   = @12ll;//([NSNumber numberWithLongLong:12ll])
    NSNumber * number   = @12ul;//([NSNumber numberWithUnsignedLong:12ul])  
    NSNumber * number   = @12.3f;//([NSNumber numberWithFloat:12.3f])   
    NSNumber * number = @YES;//([NSNumber numberWithBool:YES])      
</code></pre>

<p>NSSet Literal:    <br/>
以上应该大部分集合类的literal都有了，不过类似的NSSet Literal还没有提供。        <br/>
我们可以用数组初始化的方式:</p>

<pre><code>NSSet * set = [NSSet setWithArray:@[@"yes",@YES]];
</code></pre>

<p>当然我们也可以通过自己宏定义来实现：</p>

<pre><code> #define $(...)  [[NSSet alloc] initWithObjects:__VA_ARGS__, nil]   
  //或者          
 #define $(...)  [NSSet setWithObjects:__VA_ARGS__, nil]        
 //这样就可以用了:       
 NSSet *set = $(@"hello",@"world",@"!");        
</code></pre>

<p>Expressions:@( )</p>

<p>@( )，会动态评估里面的表达式。返回值：计算后的表达式值的对象常量。如</p>

<pre><code>[@("hello word") class] //返回类型 NSString     
[@(77 - 88) class] //返回类型 NSNumber。
</code></pre>

<p>3 @encode         <br/>
返回一个的char *类型的类型编码,<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">苹果官方文档有介绍</a>     <br/>
const char * objCType = @encode(float);       <br/>
printf(&ldquo;%s&rdquo;,objCType);</p>

<p>4 @defs</p>

<p>我们都知道，Oc的类是在c语言的结构体的基础上建立起来的。@defsd会返回Objective-C类相同的布局，例如下述代码，会得到一个相同结构的结构体。</p>

<pre><code>struct cStructure   
{   
@defs(NSObject);    
} *cStruct;     
</code></pre>

<p>不过，如果你现在尝试如上代码，你会得到：@defs is not support on this platform now 或者 @defs is no longer supported in new ABI(Application Binary Interface)的错误。因为大概xcode3.2后我们就已经无法在现在的Objective-C中使用它了。</p>
]]></content>
  </entry>
  
</feed>

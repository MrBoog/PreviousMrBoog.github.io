<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | MrBoog's Blog]]></title>
  <link href="http://MrBoog.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://MrBoog.github.io/"/>
  <updated>2017-12-29T19:27:20+08:00</updated>
  <id>http://MrBoog.github.io/</id>
  <author>
    <name><![CDATA[MrBoog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Class Cluster]]></title>
    <link href="http://MrBoog.github.io/blog/2016/06/22/class-cluster/"/>
    <updated>2016-06-22T20:29:41+08:00</updated>
    <id>http://MrBoog.github.io/blog/2016/06/22/class-cluster</id>
    <content type="html"><![CDATA[<p>Class cluster，类簇，这是苹果对抽象工厂模式一种应用，在苹果的Framework中使用广泛，是定义了相同的接口，并提供相同功能的一组类的集合。类簇会有一个公共抽象超类，比如NSString,NSArray,NSNumber,NSDictionary等等，来完成实例化一个具体的私有子类。对于使用者来说，只需要知道有公共超类各种API的作用就可以，不需要知道，超类背后子类的实际实现。</p>

<h5>self = [super init]</h5>

<p>我们在初始化的时候，为什么super init调用过后，会赋值给self呢？因为系统有很多时候使用了类簇，所以这样做防止产生的私有类和self不匹配。<code>实例的isa指针终究应该指向这个私有类，而不是当前的超类。</code>  <br/>
这样在发送消息的时候，self才能找到真正的需要执行的私有类的方法。</p>

<p><code>
id objc_msgSend(id self, SEL op, ...)
</code></p>

<h5>superclass</h5>

<p><code>
NSArray *array = @[];
NSLog(@"%@",array.superclass);               //NSArray
NSLog(@"%@",NSStringFromClass(array.class)); //__NSArrayI
</code></p>

<p>对于类簇中的超类，比如NSArray，调用superclass就会发现，他的superclass才是真正的NSArray。</p>

<h5>isMemberOfClass</h5>

<p><code>
NSLog(@"%d",[array isMemberOfClass:[NSArray class]]); //0
NSLog(@"%d",[array isKindOfClass:[NSArray class]]);   //1
</code></p>

<p>通过上面的输出同样证明了苹果的类簇利用了多态，通过子类化公共类来实现。
私有子类的实现，隐藏在簇的内部，不能被直接调用。这样公共类在使用中，实际上存放在内存中的是隐藏在类簇中的某个私有实例。 <br/>
这样的好处很明显，针对类簇，调用者只需要简单的使用超类提供的API即可。这样NSNumber根据数据不同的类型，而有多种不同的子类化的NSNumber，NSArray根据存储策略不同也有不同的NSArray，而调用者却可以根本不用注意这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multicast Delegate in Oc]]></title>
    <link href="http://MrBoog.github.io/blog/2016/03/14/multicast-delegate-in-oc/"/>
    <updated>2016-03-14T20:52:33+08:00</updated>
    <id>http://MrBoog.github.io/blog/2016/03/14/multicast-delegate-in-oc</id>
    <content type="html"><![CDATA[<p>NSNotificationCenter 我们肯定都有使用过，通过发送广播，实现一对多的消息发送。NSNotificationCenter使用起来灵活性特别高，但有时候过度使用反而是NSNotificationCenter 的弊端。在项目的设计中，我们也常会思考的一个问题：<strong>限制部分灵活性，以此来交换应用的可读性和可维护性。</strong></p>

<p>NSNotificationCenter 允许应用各种跨层访问，监听者要配合合理使用add、remove等方法，出了问题实在不好跟踪。在某些时刻，需要酌情考虑是否应该使用。</p>

<p>对于一对多的消息发送，其实还有很多办法可以考虑。比如说，我们可以通过<strong>NSProxy 实现消息转发</strong>，将我们普通一对一的delegate模式，改为一对多。</p>

<p>在目前实现过程中，需要考虑的主要有下面三点：</p>

<p><strong>1. 使用<a href="http://nshipster.com/nshashtable-and-nsmaptable/">NSHashTable</a> 处理循环引用问题</strong></p>

<p>既然是一对多，肯定需要有容器保存delegate指针，出于避免循环引用等问题的考虑，目前使用<code>NSHashTable</code>代替了数组或者字典。</p>

<p>```
&ndash; (instancetype)init{</p>

<pre><code>_delegates = [NSHashTable hashTableWithOptions:NSHashTableWeakMemory];
return self;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)addDelegate:(id)delegate{
  if (delegate != nil) {
      [_delegates addObject:delegate];
  }else{
      NSAssert(NO, @&ldquo;delegate couldn&rsquo;t be nil&rdquo;);
  }
}</p></li>
<li><p>(void)removeDelegate:(id)delegate{
  [_delegates removeObject:delegate];
}</p></li>
<li><p>(void)removeAllDelegates{
  [_delegates removeAllObjects];
}</p></li>
</ul>


<p>```</p>

<p><strong>2. 使用message forwarding转发消息</strong></p>

<p><code>-methodSignatureForSelector:</code> 和 <code>-forwardInvocation:</code>两个方法是实现转发的关键，使用<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/">NSProxy</a> 只是因为相对于 NSObject，NSProxy更专注于消息转发，没有其他太多无关的方法。当然也可以使用NSObject来做。</p>

<p>```
&ndash; (NSMethodSignature *)methodSignatureForSelector:(SEL)sel
{</p>

<pre><code>for (id delegate in _delegates) {

    NSMethodSignature *result = [delegate methodSignatureForSelector:sel];
    if (result != nil) {
        return result;
    }
}

// This causes a crash...
//        return [super methodSignatureForSelector:sel];
return [[self class] instanceMethodSignatureForSelector:@selector(doNothing)];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)forwardInvocation:(NSInvocation *)invocation
{
  SEL sel = invocation.selector;</p>

<p>  for (id delegate in _delegates) {
      if ([delegate respondsToSelector:sel]) {
          [invocation invokeWithTarget:delegate];
      }else{</p>

<pre><code>      // This causes a crash...
      //        [super forwardInvocation:invocation];
      [self doNothing];
  }
</code></pre>

<p>  }
}</p></li>
<li><p>(void)doNothing{
}
```</p></li>
</ul>


<p><strong>3. 处理 @optional的协议方法 crash问题</strong></p>

<p>协议不可能都是 @required 肯定还有 @optional，在转发中记得处理可能crash的情况。</p>

<p>使用Multicast Delegate，<strong>中间多了一层 protocol 关联</strong>，某种情况下可以解决NSNotificationCenter 跨层带来的过于松散等问题。</p>

<p><a href="https://github.com/MrBoog/SafeMulticastDelegate">DEMO 地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD同步操作之 Barriers Groups Semaphore]]></title>
    <link href="http://MrBoog.github.io/blog/2015/12/28/gcd-synchron/"/>
    <updated>2015-12-28T21:41:55+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/12/28/gcd-synchron</id>
    <content type="html"><![CDATA[<p>在学会简单的使用GCD处理多线程之后，我们来再深入了解下GCD对多线程的一些同步控制。</p>

<h2>dispatch barriers</h2>

<p>在使用 Concurrent Queue 的时候，有时候我们希望队列中的某项任务，能够被串行执行，来避免资源竞争等多线程问题。比如遇到读写问题，这时候我们就需要使用 dispatch barriers。来保证即使在并行队列中，对某个对象的读和写操作，在同一时刻，只有一个可以被执行。这时候就可以用到 dispatch barriers了。下面我们来讨论一下，不同的队列中barriers的使用：</p>

<ul>
<li><p>Custom Serial Queue: 在串行队列中，队列都是顺序串行执行，使用barriers没有任何好处。一般来讲我们不需要这么做。</p></li>
<li><p>Global Concurrent Queue: 这里虽然是并行队列，但这个队列是全局的，我们不能保证别人没有使用这个队列。对这个队列加barriers，可能会影响到其他模块的功能。所以不建议在这个队列中使用。</p></li>
<li><p>Custom Concurrent Queue: 在自定义的并行队列中使用barriers，是比较合适的方式。</p></li>
</ul>


<p>所以当我们要做的并行操作，可能存在线程安全问题的时候。我们最好考虑新建自定义并行队列，而不是简单地使用系统提供的 Global Queue。</p>

<p>举一个例子，假设某一个类要管理MyClass这个类型的读写，下面列举这个类的一些相关方法:</p>

<p>```</p>

<pre><code>//初始化自定义并发队列
- (instancetype)init{

    if(self = [super init]){
        customConcurrentQueue = dispatch_queue_create("com.customConcurrentQueue", DISPATCH_QUEUE_CONCURRENT); 
    }
}

//写方法
- (void)write:(MyClass *)myClass {

    if( myClass ){

        //使用barrier，保证写方法，可以串行执行
        dispatch_barrier_async(self.customConcurrentQueue, ^{ 

            //写操作
            ...
        });
    }
}

//读方法
- (MyClass *)read{

    //要保证，读和写方法不能同时执行，
    //首先，他们要在同一个队列中 ：self.customConcurrentQueue
    //其次，读方法要等待读出数据后返回，所以应该是同步操作 ：dispatch_sync

    __block MyClass *myClass = [[MyClass alloc] init];

    dispatch_sync(self.customConcurrentQueue, ^{

        //读操作
        myClass = ...
    });

    return myClass;
}
</code></pre>

<p>```</p>

<hr />

<h2>dispatch groups</h2>

<p>有时候，我们需要在多个并行任务全部完成后，做一些操作，这时候就需要用到 group来管理了。</p>

<p>举一个简单的例子。我有4个任务要使用并发处理，任务4要等待，任务1、2、3完成后执行。同时，任务4不阻塞当前的线程：</p>

<p>```
&ndash; (void)testDispatchGroup{</p>

<pre><code>dispatch_queue_t concurrentQueue = dispatch_queue_create("com.test.testConcurrent", DISPATCH_QUEUE_CONCURRENT);

dispatch_group_t group = dispatch_group_create();

//异步操作
dispatch_group_async(group, concurrentQueue, ^{

    任务1
});

dispatch_group_async(group, concurrentQueue, ^{

    任务2
});

dispatch_group_async(group, concurrentQueue, ^{

    任务3
});

//dispatch_group_notify 中的block执行的是我们最后要做的任务。同时，这里是异步操作，不会阻塞后面其他代码的执行。
dispatch_group_notify(group, dispatch_get_main_queue(), ^{

    //前面3个任务，都执行完成后，执行里面的block
    任务4
});

    ...
</code></pre>

<p>}</p>

<p>```</p>

<p>再看另一个需求，还是之前的4个任务。唯一的区别是，任务4除了要等待其他任务完成，还要阻塞当前线程：</p>

<p>```
&ndash; (void)testDispatchGroup{</p>

<pre><code>dispatch_group_t group = dispatch_group_create();

//异步操作
dispatch_group_async(group, concurrentQueue, ^{

    任务1
});

dispatch_group_async(group, concurrentQueue, ^{

    任务2
});

dispatch_group_async(group, concurrentQueue, ^{

    任务3
});

//dispatch_group_wait 等待上面任务全部完成，阻塞当前线程，直到超过设置的时间
//使用时，要注意避免阻塞主线程等问题
dispatch_group_wait(group, DISPATCH_TIME_FOREVER);

任务4

...
</code></pre>

<p>}</p>

<p>```</p>

<p>另外，除了使用dispatch_group_async管理要做的任务。还可以使用<code>dispatch_group_enter</code>、 <code>dispatch_group_leave</code> 组合的方式，手动通知任务完成。如果使用手动管理的话，我们要注意：<code>enter和leave方法，应该是成对出现的</code>。</p>

<p>dispatch_group_enter(customGroup) : 手动告知customGroup，表示一个任务已经开始执行。</p>

<p>dispatch_group_leave(customGroup) : 手动告知customGroup，表示一个任务已经完成。当所有enter对应的leave方法都执行过后。我们的<code>dispatch_group_notify()</code>或者<code>dispatch_group_wait()</code>，就可以接到任务完成的通知。</p>

<hr />

<h2>dispatch semaphore 信号量</h2>

<p>当有多个消费者，访问有限的资源的时候，<a href="https://en.wikipedia.org/wiki/Semaphore_(programming)">信号量</a> 可以让我们更好的控制。简单来说，我们通过对信号个数的控制，来达到线程间的同步操作。当信号个数为0的时候，当前线程被阻塞，等待信号量增加，当信号量个数大于0的时候，则线程继续执行。</p>

<p>注意，同步的操作都要小心使用，避免死锁等问题。</p>

<p>另外，根据dispatch_semaphore_wait的返回值，可以用于判断某任务是否超时操作。</p>

<p>```</p>

<ul>
<li><p>(void)testSemaphore{</p>

<p>  //创建 信号量 参数代表初始个数
  dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</p>

<p>  dispatch_async(concurrentQueue, ^{</p>

<pre><code>  sleep(2);

  //发送一个信号，信号量个数 +1   
  dispatch_semaphore_signal(semaphore);
</code></pre>

<p>  });</p>

<p>  dispatch_async(concurrentQueue, ^{</p>

<pre><code>  dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC);

  //线程等待，当信号量大于0时 任务继续执行，信号量 -1
  //线程等待，超过预定的超时时间 任务继续执行 信号量不变
  //关于返回值：当返回值 不为0 的时候，说明超时
  if( dispatch_semaphore_wait(semaphore, timeoutTime) ){
      NSLog(@"time out");
  }
</code></pre>

<p>  });
}</p></li>
</ul>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD 同步与异步 串行与并行]]></title>
    <link href="http://MrBoog.github.io/blog/2015/12/14/gcd-part-1/"/>
    <updated>2015-12-14T15:25:27+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/12/14/gcd-part-1</id>
    <content type="html"><![CDATA[<p>GCD是iOS开发多线程中经常使用的技术，先看一下GCD中的常见的术语</p>

<p>描述多个任务之间同一时刻的运行关系：</p>

<ul>
<li>serial（串行） 某一时刻，只执行一个任务</li>
<li>concurrent（并行） 可以同时执行多个任务</li>
</ul>


<p>侧重描述一个函数的执行完成，对其他任务的影响 (既 是否任务在等待某个函数完成，然后才可以运行)：</p>

<ul>
<li>synchronous（同步） 任务执行完成后reture，（阻塞）</li>
<li>asynchronous（异步） 不等待任务执行完成，立即reture，（不阻塞当前）</li>
</ul>


<p>在GCD中，我们用串行并行描述队列。这就是在描述，该队列里面的所有任务，相互之间在同一时刻，是怎样的运行关系。是指队列内本身的任务运行顺序。      <br/>
我们还用同步异步，描述某一个任务。比如说任务A是同步执行的。这就是在说，A任务，会阻塞当前任务，直到A结束。这是指不同任务之间的关系，与队列无关，可以是不同队列，也可以是相同队列。</p>

<p>接下来，我们先来看下，GCD里面的不同队列。</p>

<hr />

<h2>Serial Queues</h2>

<p>在串行队列里，同一时间只能执行一个任务。任务按照被添加进入队列的顺序依次执行。每一个任务只有在前面的任务完成后，才可以开始执行。</p>

<p>系统为我们提供的串行队列</p>

<ul>
<li><p>main queue ( dispatch_get_main_queue )</p>

<p>  main queue是一个串行队列，有串行队列的一切特性。比较特殊的一点是加入这个队列的任务，都是在主线程执行的。</p></li>
</ul>


<h2>Concurrent Queues</h2>

<p>加入并行队列的任务，执行的顺序也是按照任务被加入队列的顺序执行，这是我们唯一可以保证的。每个任务都不用等待之前的任务完成，同一时刻可以多个任务同时执行。</p>

<p>系统同样有一个全局的并发队列</p>

<ul>
<li><p>global dispatch queue ( dispatch_get_global_queue )</p>

<p>  这是另一个我们熟悉的并发队列，很多时候我们直接使用这个队列，可以简单处理一些我们需要并发执行的任务。</p></li>
</ul>


<h2>Custom Queue</h2>

<p>除了系统提供的全局队列之外，我们还可以自定义串行或者并行的队列。</p>

<p>```</p>

<pre><code>dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", DISPATCH_QUEUE_SERIAL);

dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);
</code></pre>

<p>```</p>

<p>上面是几种我们用GCD时，需要使用到的队列。</p>

<p>另外，使用GCD，除了选择正确的队列外，还要关注：我们要执行的任务是同步还是异步执行。</p>

<!--
同步执行 串行queue 
        并行queue

异步执行 串行queue 
        并行queue
-->


<hr />

<h2>dispatch_async  异步执行</h2>

<p>dispatch_async 用来用异步的方式执行串行或者并行队列里面的任务，我们来看一下使用 dispatch_async 的几种常见情况：</p>

<ul>
<li>custom Serial Queue：当我们需要执行几个应该串行执行的任务，又不阻塞当前的时候。</li>
</ul>


<p>```</p>

<pre><code>// task1 task2 顺序依次执行，同时不阻塞others

dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", NULL);

dispatch_async(mySerialQueue, ^{
   ...task1
});

dispatch_async(mySerialQueue, ^{
    ...task2
});

...others
</code></pre>

<p>```</p>

<ul>
<li><p>main Queue：当我们执行并完成了一段异步的任务，需要回到主线程更新UI的时候，很常见的选择就是使用GCD的 main queue。</p></li>
<li><p>custom or global concurrent Queue：这个是我们执行非UI任务的常见选择。要注意的是，加入队列的多个任务之间并发执行，我们无法知道那个任务先完成。</p></li>
</ul>


<p>```</p>

<pre><code>dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);

dispatch_async(myConcurrentQueue, ^{

    ...task1    
    dispatch_async(dispatch_get_main_queue(), ^{
        Update UI 
    });
});
</code></pre>

<p>```</p>

<hr />

<h2>dispatch_sync 同步执行</h2>

<p>大部分时候我们执行dispatch_sync操作，都要格外小心些。</p>

<ul>
<li>custom or main Serial Queue： 同步执行串行队列时，要注意防止发生死锁，比如下面的代码:</li>
</ul>


<p>```
//串行队列中，task2 等待 task1完成，所以不会开始。而task1又完成不了，因为task2还没有执行完(甚至都没有开始)。死锁。</p>

<pre><code>dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", DISPATCH_QUEUE_SERIAL);

dispatch_sync(mySerialQueue, ^{

    ...task1
    dispatch_sync(mySerialQueue, ^{

         ...task2            
    });
});
</code></pre>

<p>```
* concurrent Queue：合理使用可以解决一些并发读写问题。例如</p>

<p>```
//task1 执行结束后，task2才会开始执行。</p>

<pre><code>dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);

dispatch_sync(myConcurrentQueue, ^{

    ...task1 读
});

dispatch_async(myConcurrentQueue, ^{

    ...task2 写
});
</code></pre>

<p>```</p>

<hr />

<h2>dispatch_after</h2>

<p>异步延迟操作。实际上 dispatch_after 就像一个延迟执行的 dispatch_async。</p>

<p>```</p>

<pre><code>double delayInSeconds = 1.0;
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
 dispatch_after(popTime, dispatch_get_main_queue(), ^(void){

});
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello ReactNative]]></title>
    <link href="http://MrBoog.github.io/blog/2015/11/11/helloreactnative/"/>
    <updated>2015-11-11T16:09:23+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/11/11/helloreactnative</id>
    <content type="html"><![CDATA[<p>虽然很多开发者都是一直使用Oc和Swift开发iOS应用，但不得不说ReactNative的'learn-once write-anywhere'，对开发者还是有强大的吸引力的。用Js写逻辑，并且使用原生的UI，不依托于浏览器，如今的Js越来越强大。即便是使用原生语言的开发者，也应该详细了解下。</p>

<h3>配置 React Native</h3>

<p>要想在项目中使用<a href="https://facebook.github.io/react-native/docs/getting-started.html#content">ReactNative</a>，需要先搭建Node.js环境。下面我们使用nvm，下载管理Node.js。</p>

<ul>
<li>nvm</li>
</ul>


<p>官方安装和使用 nvm 的<a href="https://github.com/creationix/nvm#installation">步骤</a>。简单整理下：</p>

<p>安装：</p>

<p>```</p>

<pre><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash

sh ~/.nvm/nvm.sh
</code></pre>

<p>```</p>

<p>把下面的内容追加到 <code>~/.bashrc</code> 和 <code>~/.profile</code> 中</p>

<p>例如：vim ~/.bashrc</p>

<p>```</p>

<pre><code>source ~/.nvm/nvm.sh
</code></pre>

<p>```</p>

<p>完成后重启终端</p>

<p>使用nvm下载Node：</p>

<p>```</p>

<pre><code>//查看支持版本
nvm ls-remote

nvm install v5.5.0

nvm use v5.5.0
</code></pre>

<p>```</p>

<p>或者直接下载最新版本的Node</p>

<p>```</p>

<pre><code>nvm install node &amp;&amp; nvm alias default node
</code></pre>

<p>```</p>

<ul>
<li>安装watchman</li>
</ul>


<p>```</p>

<pre><code>brew install watchman
</code></pre>

<p>```</p>

<ul>
<li>安装 React Native CLI tool</li>
</ul>


<p>```</p>

<pre><code>npm install -g react-native-cli
</code></pre>

<p>```</p>

<p>准备工作基本结束</p>

<hr />

<h3>hello world</h3>

<p>下面我们选择一个目录，新建一个ReactNative项目。</p>

<p>```</p>

<pre><code>react-native init HelloReactNative
</code></pre>

<p>```</p>

<p>找到index.ios.js，替换一下下面的代码。找到iOS文件夹下面的工程，运行一下，一个简单用ReactNative实现的helloworld程序，就可以跑起来了。</p>

<p>```
&lsquo;use strict&rsquo;;</p>

<p>var React = require(&lsquo;react-native&rsquo;);</p>

<p>var styles = React.StyleSheet.create({
  text: {</p>

<pre><code>color: 'black',
backgroundColor: 'white',
fontSize: 30,
margin: 80
</code></pre>

<p>  }
});</p>

<p>// for app itself
class ReactNativeDemoApp extends React.Component {
  render() {</p>

<pre><code>return React.createElement(React.Text, {style: styles.text}, "Hello World");
</code></pre>

<p>  }
}</p>

<p>React.AppRegistry.registerComponent(&lsquo;HelloReactNative&rsquo;, () => ReactNativeDemoApp);
```</p>
]]></content>
  </entry>
  
</feed>

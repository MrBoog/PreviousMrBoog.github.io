<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | MrBoog's Blog]]></title>
  <link href="http://MrBoog.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://MrBoog.github.io/"/>
  <updated>2019-01-17T17:41:18+08:00</updated>
  <id>http://MrBoog.github.io/</id>
  <author>
    <name><![CDATA[MrBoog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scripting Swift]]></title>
    <link href="http://MrBoog.github.io/blog/2017/03/17/scripting-swift/"/>
    <updated>2017-03-17T17:19:06+08:00</updated>
    <id>http://MrBoog.github.io/blog/2017/03/17/scripting-swift</id>
    <content type="html"><![CDATA[<p>作为iOS开发者，Swift断断续续也用了几年了，不得不说还真是很好用的。但其实swift不仅可以用来写 iOS or Mac OS，只要装了Xcode，<strong>Swift 在Mac系统下写起脚本来一样很好用的。</strong></p>

<p>Well&hellip; Long story short,  Let&rsquo;s Get Started~~</p>

<h3>Hello world</h3>

<p>首先，最简单的，我们先来在终端用swift输出hello world试试。
输入 <strong>swift</strong> into the terminal然后回车，输入任何swift语句比如打印hello world，使用<strong>Ctrl-D</strong>退出：</p>

<p><code>
$ swift
Welcome to Apple Swift. Type :help for assistance.
1&gt; print(“Hello World”)
2&gt;
</code></p>

<p>这就像Python一样，swift命令行的交互模式叫做 <a href="https://developer.apple.com/swift/blog/?id=18"><strong>Swift REPL (read eval print loop)</strong></a>。
既然是按照脚本执行，肯定就存在这对应的解析执行脚本的程序。先看看我们平时用的bash：</p>

<p>```
$ cat /etc/shells</p>

<h1>List of acceptable shells for chpass(1).</h1>

<h1>Ftpd will not allow users to connect who are not using</h1>

<h1>one of these shells.</h1>

<p>/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
```</p>

<p>这里当然没有了，不过如果我们执行type命令可以看到如下输出：</p>

<p><code>
$ type swift
swift is hashed (/usr/bin/swift)
</code></p>

<p>注意到<strong>/usr/bin/swift</strong>了吗，事实上这就是我们要找的了。</p>

<p>在swift脚本文件最上面加上<strong>#!/usr/bin/swift</strong> (或者 <em>#!/usr/bin/env swift</em>) 就启动swift解释器了, 后面的语句就会在swift环境下面编译。无需多说，这基本和我们以前使用bash时 要加入 <strong>#!/bin/bash</strong>一样。</p>

<p>接下来我们就创建一个demo.swift，做个最简单的测试：</p>

<p><code>
$touch demo.swift
$vim demo.swift
</code></p>

<p>编辑demo.swift文件：</p>

<p>```</p>

<h1>!/usr/bin/swift</h1>

<p>import Foundation
print(&ldquo;hello world&rdquo;)
```</p>

<p>编辑保存后，给它可执行的权限后，<strong>./demo.swift</strong>运行肯定就看到输出效果了。这样就是最简单的swift<em>脚本了</em>：</p>

<p><code>
$chmod +x demo.swift
$./demo.swift
hello world
</code></p>

<h3>Demo time:</h3>

<p>下面简单写一个可以传参数的demo，假设我们要做一个可以一键备份我的博客的功能。</p>

<p>按照之前的步骤，创建一个新的 backup.swift文件，用来提交我的博客到git服务器同时需要提交相应描述。
这里我们要解决两个问题。</p>

<ol>
<li>获取命令行传入的参数</li>
<li>要在swift里面调用其他命令行工具，比如语句: git add .</li>
</ol>


<p>要解决第一个问题，我们需要引用一个新的类<strong>CommandLine </strong>(或者<code>C_ARGC</code> and <code>C_ARGV</code>)。
CommandLine.arguments是个数组，可以直接通过它拿到想要的参数。
至于第二个问题，我们需要另一个在Swift脚本中很重要类<strong>Process</strong>。Process可以混合 swift和bash。
下面直接看下编写后的backup.swift：</p>

<p>```</p>

<h1>!/usr/bin/swift</h1>

<p>import Foundation</p>

<p>func backup() {
let args = CommandLine.arguments
guard args.count > 1 else {
return print(&ldquo;Backup Failed! : \n    Detail: Missing commit message whick should be surrounded by quotation mark.&rdquo;)
}
let arg = args[1]
shell(&ldquo;git&rdquo;, &ldquo;pull&rdquo;)
shell(&ldquo;git&rdquo;, &ldquo;commit&rdquo;, &ldquo;-am&rdquo;, arg)
shell(&ldquo;git&rdquo;, &ldquo;push&rdquo;, &ldquo;origin&rdquo;, &ldquo;HEAD:source&rdquo;)
}</p>

<p>@discardableResult
func shell(_ args: String&hellip;) &ndash;> Int32 {
let task = Process()
task.launchPath = &ldquo;/usr/bin/env&rdquo;
task.arguments = args
task.launch()
task.waitUntilExit()
return task.terminationStatus
}</p>

<p>backup()
```</p>

<p>把这个脚本放在我的博客git目录下，运行就会自动开始将内容Push到git服务器了。</p>

<p><code>
$ ./backup.swift "Blog: Backup"
remote: Enumerating objects: 139, done.
remote: Counting objects: 100% (139/139), done.
remote: Compressing objects: 100% (33/33), done.
remote: Total 149 (delta 53), reused 139 (delta 53), pack-reused 10
Receiving objects: 100% (149/149), 61.23 KiB | 61.00 KiB/s, done.
...
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APNs Token-Based Connection]]></title>
    <link href="http://MrBoog.github.io/blog/2017/02/11/apns-token-based-connection/"/>
    <updated>2017-02-11T20:17:59+08:00</updated>
    <id>http://MrBoog.github.io/blog/2017/02/11/apns-token-based-connection</id>
    <content type="html"><![CDATA[<p>2016年苹果上线了新的推送验证方式，使用新的方式我们将不再需要之前的 <strong>.p12</strong>或者<strong>.pem</strong>文件，取而代之的是一个<strong>.p8</strong>文件 (并且不用区分dev和release环境)。一些大的推送服务厂商已经开始支持这种新的方式了，比如国外的<a href="https://firebase.google.com/docs/cloud-messaging/ios/certs">Firebase</a>。这种新的方式优势还是很明显的，比如说</p>

<ul>
<li>速度更快</li>
<li>可以支持同一开发者账号下的多个App</li>
<li>支持多个后台同时使用同一个文件</li>
<li>不需要考虑生产和开发环境</li>
<li>不会过期</li>
</ul>


<p>需要注意的是，虽然新的推送验证永远不会过期，但认证密钥和<strong>.p8</strong>文件需要严格保密。如果发现有泄露风险，建议赶紧revoke然后重新创建。</p>

<p>由于不再需要分别配置dev和release环境的证书，所以测试的流程也会简化。<strong>推荐一个开源的基于Node.js的<a href="https://www.npmjs.com/package/apn">推送后台</a>。</strong> 我是只用于测试的，毕竟真正的生产环境大家都还是在用一些大厂的服务，比如谷歌的Firebase或者国内的友盟推送等。这里有个简单用这个Node.js的<a href="https://github.com/MrBoog/Test-ANPS-with-p8-file">Demo</a>, 可以用于开发者自己测试推送使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Symbolicating Crash Log]]></title>
    <link href="http://MrBoog.github.io/blog/2017/01/10/symbolicating-crash-log/"/>
    <updated>2017-01-10T17:23:39+08:00</updated>
    <id>http://MrBoog.github.io/blog/2017/01/10/symbolicating-crash-log</id>
    <content type="html"><![CDATA[<p>When our App crashes, a crash report is created and stored on the device. But usually, we need to symbolicate the log before analyzing it. So here I write down the steps to symbolicate crash log.</p>

<ol>
<li><p>Create a new folder. Place our crash file and dSYM file in that folder:</p>

<ul>
<li>myApp.crash</li>
<li>myApp.dSYM</li>
</ul>
</li>
<li><p>Find <code>symbolicatecrash</code> file in your Xcode (which is written by perl). Copy it to the folder that you just created.</p>

<p>Usually, the path should be:
    <strong>/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash</strong></p>

<p>Or, You could find the path by yourself:</p>

<p> <code>
 find /Applications/Xcode.app -name symbolicatecrash -type f
</code></p></li>
<li><p>export env var</p>

<p> <code>
 export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
</code></p></li>
<li><p>Final step, symbolicate crash</p>

<p> <code>
 ./symbolicatecrash myApp.crash &gt; SymbolicatedM.crash
</code></p></li>
</ol>


<p>Ok alright, we&rsquo;ve already done all of the work. So if the dSYM is matched with the crash file, here should be possible to generate a new file: <strong>SymbolicatedM.crash</strong>. Just open it, after symbolicating it should be easy to read this time.</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Cluster]]></title>
    <link href="http://MrBoog.github.io/blog/2016/06/22/class-cluster/"/>
    <updated>2016-06-22T20:29:41+08:00</updated>
    <id>http://MrBoog.github.io/blog/2016/06/22/class-cluster</id>
    <content type="html"><![CDATA[<p>Class cluster，类簇，这是苹果对抽象工厂模式一种应用，在苹果的Framework中使用广泛，是定义了相同的接口，并提供相同功能的一组类的集合。类簇会有一个公共抽象超类，比如NSString,NSArray,NSNumber,NSDictionary等等，来完成实例化一个具体的私有子类。对于使用者来说，只需要知道有公共超类各种API的作用就可以，不需要知道，超类背后子类的实际实现。</p>

<h5>self = [super init]</h5>

<p>我们在初始化的时候，为什么super init调用过后，会赋值给self呢？因为系统有很多时候使用了类簇，所以这样做防止产生的私有类和self不匹配。<code>实例的isa指针终究应该指向这个私有类，而不是当前的超类。</code>  <br/>
这样在发送消息的时候，self才能找到真正的需要执行的私有类的方法。</p>

<p><code>
id objc_msgSend(id self, SEL op, ...)
</code></p>

<h5>superclass</h5>

<p><code>
NSArray *array = @[];
NSLog(@"%@",array.superclass);               //NSArray
NSLog(@"%@",NSStringFromClass(array.class)); //__NSArrayI
</code></p>

<p>对于类簇中的超类，比如NSArray，调用superclass就会发现，他的superclass才是真正的NSArray。</p>

<h5>isMemberOfClass</h5>

<p><code>
NSLog(@"%d",[array isMemberOfClass:[NSArray class]]); //0
NSLog(@"%d",[array isKindOfClass:[NSArray class]]);   //1
</code></p>

<p>通过上面的输出同样证明了苹果的类簇利用了多态，通过子类化公共类来实现。
私有子类的实现，隐藏在簇的内部，不能被直接调用。这样公共类在使用中，实际上存放在内存中的是隐藏在类簇中的某个私有实例。 <br/>
这样的好处很明显，针对类簇，调用者只需要简单的使用超类提供的API即可。这样NSNumber根据数据不同的类型，而有多种不同的子类化的NSNumber，NSArray根据存储策略不同也有不同的NSArray，而调用者却可以根本不用注意这些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multicast Delegate in Oc]]></title>
    <link href="http://MrBoog.github.io/blog/2016/03/14/multicast-delegate-in-oc/"/>
    <updated>2016-03-14T20:52:33+08:00</updated>
    <id>http://MrBoog.github.io/blog/2016/03/14/multicast-delegate-in-oc</id>
    <content type="html"><![CDATA[<p>NSNotificationCenter 我们肯定都有使用过，通过发送广播，实现一对多的消息发送。NSNotificationCenter使用起来灵活性特别高，但有时候过度使用反而是NSNotificationCenter 的弊端。在项目的设计中，我们也常会思考的一个问题：<strong>限制部分灵活性，以此来交换应用的可读性和可维护性。</strong></p>

<p>NSNotificationCenter 允许应用各种跨层访问，监听者要配合合理使用add、remove等方法，出了问题实在不好跟踪。在某些时刻，需要酌情考虑是否应该使用。</p>

<p>对于一对多的消息发送，其实还有很多办法可以考虑。比如说，我们可以通过<strong>NSProxy 实现消息转发</strong>，将我们普通一对一的delegate模式，改为一对多。</p>

<p>在目前实现过程中，需要考虑的主要有下面三点：</p>

<p><strong>1. 使用<a href="http://nshipster.com/nshashtable-and-nsmaptable/">NSHashTable</a> 处理循环引用问题</strong></p>

<p>既然是一对多，肯定需要有容器保存delegate指针，出于避免循环引用等问题的考虑，目前使用<code>NSHashTable</code>代替了数组或者字典。</p>

<p>```
&ndash; (instancetype)init{</p>

<pre><code>_delegates = [NSHashTable hashTableWithOptions:NSHashTableWeakMemory];
return self;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)addDelegate:(id)delegate{
  if (delegate != nil) {
      [_delegates addObject:delegate];
  }else{
      NSAssert(NO, @&ldquo;delegate couldn&rsquo;t be nil&rdquo;);
  }
}</p></li>
<li><p>(void)removeDelegate:(id)delegate{
  [_delegates removeObject:delegate];
}</p></li>
<li><p>(void)removeAllDelegates{
  [_delegates removeAllObjects];
}</p></li>
</ul>


<p>```</p>

<p><strong>2. 使用message forwarding转发消息</strong></p>

<p><code>-methodSignatureForSelector:</code> 和 <code>-forwardInvocation:</code>两个方法是实现转发的关键，使用<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/">NSProxy</a> 只是因为相对于 NSObject，NSProxy更专注于消息转发，没有其他太多无关的方法。当然也可以使用NSObject来做。</p>

<p>```
&ndash; (NSMethodSignature *)methodSignatureForSelector:(SEL)sel
{</p>

<pre><code>for (id delegate in _delegates) {

    NSMethodSignature *result = [delegate methodSignatureForSelector:sel];
    if (result != nil) {
        return result;
    }
}

// This causes a crash...
//        return [super methodSignatureForSelector:sel];
return [[self class] instanceMethodSignatureForSelector:@selector(doNothing)];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)forwardInvocation:(NSInvocation *)invocation
{
  SEL sel = invocation.selector;</p>

<p>  for (id delegate in _delegates) {
      if ([delegate respondsToSelector:sel]) {
          [invocation invokeWithTarget:delegate];
      }else{</p>

<pre><code>      // This causes a crash...
      //        [super forwardInvocation:invocation];
      [self doNothing];
  }
</code></pre>

<p>  }
}</p></li>
<li><p>(void)doNothing{
}
```</p></li>
</ul>


<p><strong>3. 处理 @optional的协议方法 crash问题</strong></p>

<p>协议不可能都是 @required 肯定还有 @optional，在转发中记得处理可能crash的情况。</p>

<p>使用Multicast Delegate，<strong>中间多了一层 protocol 关联</strong>，某种情况下可以解决NSNotificationCenter 跨层带来的过于松散等问题。</p>

<p><a href="https://github.com/MrBoog/SafeMulticastDelegate">DEMO 地址</a></p>
]]></content>
  </entry>
  
</feed>

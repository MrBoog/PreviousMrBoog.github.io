<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | HuanLiu's Blog]]></title>
  <link href="http://MrBoog.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://MrBoog.github.io/"/>
  <updated>2016-02-18T12:48:36+08:00</updated>
  <id>http://MrBoog.github.io/</id>
  <author>
    <name><![CDATA[HuanLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCD同步操作之 Barriers Groups Semaphore]]></title>
    <link href="http://MrBoog.github.io/blog/2015/12/28/gcd-synchron/"/>
    <updated>2015-12-28T21:41:55+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/12/28/gcd-synchron</id>
    <content type="html"><![CDATA[<p>在学会简单的使用GCD处理多线程之后，我们来再深入了解下GCD对多线程的一些同步控制。</p>

<h2>dispatch barriers</h2>

<p>在使用 Concurrent Queue 的时候，有时候我们希望队列中的某项任务，能够被串行执行，来避免资源竞争等多线程问题。比如遇到读写问题，这时候我们就需要使用 dispatch barriers。来保证即使在并行队列中，对某个对象的读和写操作，在同一时刻，只有一个可以被执行。这时候就可以用到 dispatch barriers了。下面我们来讨论一下，不同的队列中barriers的使用：</p>

<ul>
<li><p>Custom Serial Queue: 在串行队列中，队列都是顺序串行执行，使用barriers没有任何好处。一般来讲我们不需要这么做。</p></li>
<li><p>Global Concurrent Queue: 这里虽然是并行队列，但这个队列是全局的，我们不能保证别人没有使用这个队列。对这个队列加barriers，可能会影响到其他模块的功能。所以不建议在这个队列中使用。</p></li>
<li><p>Custom Concurrent Queue: 在自定义的并行队列中使用barriers，是比较合适的方式。</p></li>
</ul>


<p>所以当我们要做的并行操作，可能存在线程安全问题的时候。我们最好考虑新建自定义并行队列，而不是简单地使用系统提供的 Global Queue。</p>

<p>举一个例子，假设某一个类要管理MyClass这个类型的读写，下面列举这个类的一些相关方法:</p>

<p>```</p>

<pre><code>//初始化自定义并发队列
- (instancetype)init{

    if(self = [super init]){
        customConcurrentQueue = dispatch_queue_create("com.customConcurrentQueue", DISPATCH_QUEUE_CONCURRENT); 
    }
}

//写方法
- (void)write:(MyClass *)myClass {

    if( myClass ){

        //使用barrier，保证写方法，可以串行执行
        dispatch_barrier_async(self.customConcurrentQueue, ^{ 

            //写操作
            ...
        });
    }
}

//读方法
- (MyClass *)read{

    //要保证，读和写方法不能同时执行，
    //首先，他们要在同一个队列中 ：self.customConcurrentQueue
    //其次，读方法要等待读出数据后返回，所以应该是同步操作 ：dispatch_sync

    __block MyClass *myClass = [[MyClass alloc] init];

    dispatch_sync(self.customConcurrentQueue, ^{

        //读操作
        myClass = ...
    });

    return myClass;
}
</code></pre>

<p>```</p>

<hr />

<h2>dispatch groups</h2>

<p>有时候，我们需要在多个并行任务全部完成后，做一些操作，这时候就需要用到 group来管理了。</p>

<p>举一个简单的例子。我有4个任务要使用并发处理，任务4要等待，任务1、2、3完成后执行。同时，任务4不阻塞当前的线程：</p>

<p>```
&ndash; (void)testDispatchGroup{</p>

<pre><code>dispatch_queue_t concurrentQueue = dispatch_queue_create("com.test.testConcurrent", DISPATCH_QUEUE_CONCURRENT);

dispatch_group_t group = dispatch_group_create();

//异步操作
dispatch_group_async(group, concurrentQueue, ^{

    任务1
});

dispatch_group_async(group, concurrentQueue, ^{

    任务2
});

dispatch_group_async(group, concurrentQueue, ^{

    任务3
});

//dispatch_group_notify 中的block执行的是我们最后要做的任务。同时，这里是异步操作，不会阻塞后面其他代码的执行。
dispatch_group_notify(group, dispatch_get_main_queue(), ^{

    //前面3个任务，都执行完成后，执行里面的block
    任务4
});

    ...
</code></pre>

<p>}</p>

<p>```</p>

<p>再看另一个需求，还是之前的4个任务。唯一的区别是，任务4除了要等待其他任务完成，还要阻塞当前线程：</p>

<p>```
&ndash; (void)testDispatchGroup{</p>

<pre><code>dispatch_group_t group = dispatch_group_create();

//异步操作
dispatch_group_async(group, concurrentQueue, ^{

    任务1
});

dispatch_group_async(group, concurrentQueue, ^{

    任务2
});

dispatch_group_async(group, concurrentQueue, ^{

    任务3
});

//dispatch_group_wait 等待上面任务全部完成，阻塞当前线程，直到超过设置的时间
//使用时，要注意避免阻塞主线程等问题
dispatch_group_wait(group, DISPATCH_TIME_FOREVER);

任务4

...
</code></pre>

<p>}</p>

<p>```</p>

<p>另外，除了使用dispatch_group_async管理要做的任务。还可以使用<code>dispatch_group_enter</code>、 <code>dispatch_group_leave</code> 组合的方式，手动通知任务完成。如果使用手动管理的话，我们要注意：<code>enter和leave方法，应该是成对出现的</code>。</p>

<p>dispatch_group_enter(customGroup) : 手动告知customGroup，表示一个任务已经开始执行。</p>

<p>dispatch_group_leave(customGroup) : 手动告知customGroup，表示一个任务已经完成。当所有enter对应的leave方法都执行过后。我们的<code>dispatch_group_notify()</code>或者<code>dispatch_group_wait()</code>，就可以接到任务完成的通知。</p>

<hr />

<h2>dispatch semaphore 信号量</h2>

<p>当有多个消费者，访问有限的资源的时候，<a href="https://en.wikipedia.org/wiki/Semaphore_(programming)">信号量</a> 可以让我们更好的控制。简单来说，我们通过对信号个数的控制，来达到线程间的同步操作。当信号个数为0的时候，当前线程被阻塞，等待信号量增加，当信号量个数大于0的时候，则线程继续执行。</p>

<p>注意，同步的操作都要小心使用，避免死锁等问题。</p>

<p>另外，根据dispatch_semaphore_wait的返回值，可以用于判断某任务是否超时操作。</p>

<p>```</p>

<ul>
<li><p>(void)testSemaphore{</p>

<p>  //创建 信号量 参数代表初始个数
  dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</p>

<p>  dispatch_async(concurrentQueue, ^{</p>

<pre><code>  sleep(2);

  //发送一个信号，信号量个数 +1   
  dispatch_semaphore_signal(semaphore);
</code></pre>

<p>  });</p>

<p>  dispatch_async(concurrentQueue, ^{</p>

<pre><code>  dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC);

  //线程等待，当信号量大于0时 任务继续执行，信号量 -1
  //线程等待，超过预定的超时时间 任务继续执行 信号量不变
  //关于返回值：当返回值 不为0 的时候，说明超时
  if( dispatch_semaphore_wait(semaphore, timeoutTime) ){
      NSLog(@"time out");
  }
</code></pre>

<p>  });
}</p></li>
</ul>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD 同步与异步 串行与并行]]></title>
    <link href="http://MrBoog.github.io/blog/2015/12/14/gcd-part-1/"/>
    <updated>2015-12-14T15:25:27+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/12/14/gcd-part-1</id>
    <content type="html"><![CDATA[<p>GCD是iOS开发多线程中经常使用的技术，先看一下GCD中的常见的术语</p>

<p>描述多个任务之间同一时刻的运行关系：</p>

<ul>
<li>serial（串行） 某一时刻，只执行一个任务</li>
<li>concurrent（并行） 可以同时执行多个任务</li>
</ul>


<p>侧重描述一个函数的执行完成，对其他任务的影响 (既 是否任务在等待某个函数完成，然后才可以运行)：</p>

<ul>
<li>synchronous（同步） 任务执行完成后reture，（阻塞）</li>
<li>asynchronous（异步） 不等待任务执行完成，立即reture，（不阻塞当前）</li>
</ul>


<p>在GCD中，我们用串行并行描述队列。这就是在描述，该队列里面的所有任务，相互之间在同一时刻，是怎样的运行关系。是指队列内本身的任务运行顺序。      <br/>
我们还用同步异步，描述某一个任务。比如说任务A是同步执行的。这就是在说，A任务，会阻塞当前任务，直到A结束。这是指不同任务之间的关系，与队列无关，可以是不同队列，也可以是相同队列。</p>

<p>接下来，我们先来看下，GCD里面的不同队列。</p>

<hr />

<h2>Serial Queues</h2>

<p>在串行队列里，同一时间只能执行一个任务。任务按照被添加进入队列的顺序依次执行。每一个任务只有在前面的任务完成后，才可以开始执行。</p>

<p>系统为我们提供的串行队列</p>

<ul>
<li><p>main queue ( dispatch_get_main_queue )</p>

<p>  main queue是一个串行队列，有串行队列的一切特性。比较特殊的一点是加入这个队列的任务，都是在主线程执行的。</p></li>
</ul>


<h2>Concurrent Queues</h2>

<p>加入并行队列的任务，执行的顺序也是按照任务被加入队列的顺序执行，这是我们唯一可以保证的。每个任务都不用等待之前的任务完成，同一时刻可以多个任务同时执行。</p>

<p>系统同样有一个全局的并发队列</p>

<ul>
<li><p>global dispatch queue ( dispatch_get_global_queue )</p>

<p>  这是另一个我们熟悉的并发队列，很多时候我们直接使用这个队列，可以简单处理一些我们需要并发执行的任务。</p></li>
</ul>


<h2>Custom Queue</h2>

<p>除了系统提供的全局队列之外，我们还可以自定义串行或者并行的队列。</p>

<p>```</p>

<pre><code>dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", DISPATCH_QUEUE_SERIAL);

dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);
</code></pre>

<p>```</p>

<p>上面是几种我们用GCD时，需要使用到的队列。</p>

<p>另外，使用GCD，除了选择正确的队列外，还要关注：我们要执行的任务是同步还是异步执行。</p>

<!--
同步执行 串行queue 
        并行queue

异步执行 串行queue 
        并行queue
-->


<hr />

<h2>dispatch_async  异步执行</h2>

<p>dispatch_async 用来用异步的方式执行串行或者并行队列里面的任务，我们来看一下使用 dispatch_async 的几种常见情况：</p>

<ul>
<li>custom Serial Queue：当我们需要执行几个应该串行执行的任务，又不阻塞当前的时候。</li>
</ul>


<p>```</p>

<pre><code>// task1 task2 顺序依次执行，同时不阻塞others

dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", NULL);

dispatch_async(mySerialQueue, ^{
   ...task1
});

dispatch_async(mySerialQueue, ^{
    ...task2
});

...others
</code></pre>

<p>```</p>

<ul>
<li><p>main Queue：当我们执行并完成了一段异步的任务，需要回到主线程更新UI的时候，很常见的选择就是使用GCD的 main queue。</p></li>
<li><p>custom or global concurrent Queue：这个是我们执行非UI任务的常见选择。要注意的是，加入队列的多个任务之间并发执行，我们无法知道那个任务先完成。</p></li>
</ul>


<p>```</p>

<pre><code>dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);

dispatch_async(myConcurrentQueue, ^{

    ...task1    
    dispatch_async(dispatch_get_main_queue(), ^{
        Update UI 
    });
});
</code></pre>

<p>```</p>

<hr />

<h2>dispatch_sync 同步执行</h2>

<p>大部分时候我们执行dispatch_sync操作，都要格外小心些。</p>

<ul>
<li>custom or main Serial Queue： 同步执行串行队列时，要注意防止发生死锁，比如下面的代码:</li>
</ul>


<p>```
//串行队列中，task2 等待 task1完成，所以不会开始。而task1又完成不了，因为task2还没有执行完(甚至都没有开始)。死锁。</p>

<pre><code>dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", DISPATCH_QUEUE_SERIAL);

dispatch_sync(mySerialQueue, ^{

    ...task1
    dispatch_sync(mySerialQueue, ^{

         ...task2            
    });
});
</code></pre>

<p>```
* concurrent Queue：合理使用可以解决一些并发读写问题。例如</p>

<p>```
//task1 执行结束后，task2才会开始执行。</p>

<pre><code>dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);

dispatch_sync(myConcurrentQueue, ^{

    ...task1 读
});

dispatch_async(myConcurrentQueue, ^{

    ...task2 写
});
</code></pre>

<p>```</p>

<hr />

<h2>dispatch_after</h2>

<p>异步延迟操作。实际上 dispatch_after 就像一个延迟执行的 dispatch_async。</p>

<p>```</p>

<pre><code>double delayInSeconds = 1.0;
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
 dispatch_after(popTime, dispatch_get_main_queue(), ^(void){

});
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello ReactNative]]></title>
    <link href="http://MrBoog.github.io/blog/2015/11/11/helloreactnative/"/>
    <updated>2015-11-11T16:09:23+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/11/11/helloreactnative</id>
    <content type="html"><![CDATA[<p>虽然很多开发者都是一直使用Oc和Swift开发iOS应用，但不得不说ReactNative的'learn-once write-anywhere'，对开发者还是有强大的吸引力的。用Js写逻辑，并且使用原生的UI，不依托于浏览器，如今的Js越来越强大。即便是使用原生语言的开发者，也应该详细了解下。</p>

<h3>配置 React Native</h3>

<p>要想在项目中使用<a href="https://facebook.github.io/react-native/docs/getting-started.html#content">ReactNative</a>，需要先搭建Node.js环境。下面我们使用nvm，下载管理Node.js。</p>

<ul>
<li>nvm</li>
</ul>


<p>官方安装和使用 nvm 的<a href="https://github.com/creationix/nvm#installation">步骤</a>。简单整理下：</p>

<p>安装：</p>

<p>```</p>

<pre><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash

sh ~/.nvm/nvm.sh
</code></pre>

<p>```</p>

<p>把下面的内容追加到 <code>~/.bashrc</code> 和 <code>~/.profile</code> 中</p>

<p>例如：vim ~/.bashrc</p>

<p>```</p>

<pre><code>source ~/.nvm/nvm.sh
</code></pre>

<p>```</p>

<p>完成后重启终端</p>

<p>使用nvm下载Node：</p>

<p>```</p>

<pre><code>//查看支持版本
nvm ls-remote

nvm install v5.5.0

nvm use v5.5.0
</code></pre>

<p>```</p>

<p>或者直接下载最新版本的Node</p>

<p>```</p>

<pre><code>nvm install node &amp;&amp; nvm alias default node
</code></pre>

<p>```</p>

<ul>
<li>安装watchman</li>
</ul>


<p>```</p>

<pre><code>brew install watchman
</code></pre>

<p>```</p>

<ul>
<li>安装 React Native CLI tool</li>
</ul>


<p>```</p>

<pre><code>npm install -g react-native-cli
</code></pre>

<p>```</p>

<p>准备工作基本结束</p>

<hr />

<h3>hello world</h3>

<p>下面我们选择一个目录，新建一个ReactNative项目。</p>

<p>```</p>

<pre><code>react-native init HelloReactNative
</code></pre>

<p>```</p>

<p>找到index.ios.js，替换一下下面的代码。找到iOS文件夹下面的工程，运行一下，一个简单用ReactNative实现的helloworld程序，就可以跑起来了。</p>

<p>```
&lsquo;use strict&rsquo;;</p>

<p>var React = require(&lsquo;react-native&rsquo;);</p>

<p>var styles = React.StyleSheet.create({
  text: {</p>

<pre><code>color: 'black',
backgroundColor: 'white',
fontSize: 30,
margin: 80
</code></pre>

<p>  }
});</p>

<p>// for app itself
class ReactNativeDemoApp extends React.Component {
  render() {</p>

<pre><code>return React.createElement(React.Text, {style: styles.text}, "Hello World");
</code></pre>

<p>  }
}</p>

<p>React.AppRegistry.registerComponent(&lsquo;HelloReactNative&rsquo;, () => ReactNativeDemoApp);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于NSOperation]]></title>
    <link href="http://MrBoog.github.io/blog/2015/09/30/guan-yu-nsoperation/"/>
    <updated>2015-09-30T17:56:07+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/09/30/guan-yu-nsoperation</id>
    <content type="html"><![CDATA[<p>NSOperation 是 abstract class 抽象类，不能直接使用，我们使用的时候，一般要子类化，或者直接使用系统提供的两个子类：</p>

<ul>
<li>NSInvocationOperation</li>
<li>NSBlockOperation</li>
</ul>


<p>虽然GCD使用起来很方便，但使用不当也会暴露一些问题，比如对任务状态的不好控制等。这可能导致有些我们本来需要取消掉的任务，一直在运行，占用资源。这些情况下我们可以考虑通过 NSOperationQueue 加强对任务的控制。</p>

<hr />

<h4>NSInvocationOperation</h4>

<p>NSInvocationOperation是抽象类NSOperation的实体子类，可以直接使用。如果不结合NSOperationQueue，单独通过调用 start方法使用，NSInvocationOperation是非并发的操作。例如：</p>

<p>```</p>

<pre><code>// 通过 start 直接调用，任务将在主线程中执行。
NSInvocationOperation *invocationOp = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(doSomeThingWithInvocation:) object:nil];
[invocationOp start];

// 或者通过 addOperation 将任务加入队列，可在子线程中执行
myOperationQueue = [[NSOperationQueue alloc] init];
[myOperationQueue addOperation:invocationOp];
</code></pre>

<p>```</p>

<p>当然，在swift中,NSInvocation相关的类，都已经去掉了(不知道以后会不会加入)，也许NSInvocationOperation也是退出历史舞台的节奏。</p>

<hr />

<h4>NSBlockOperation</h4>

<p>NSBlockOperation也是NSOperation的子类，只是跟NSInvocationOperation使用NSInvocation不同，NSBlockOperation使用block，使用起来会更方便。</p>

<p>```</p>

<pre><code>myOperationQueue = [[NSOperationQueue alloc] init];        
NSBlockOperation *blockOp = [NSBlockOperation blockOperationWithBlock:^{
    //需要执行的任务
}];

[blockOp addExecutionBlock:^{
    //需要执行的任务
}];

// finished属性为YES后(完成或者被取消)将会执行
__weak NSBlockOperation *weakOp = blockOp;
[blockOp setCompletionBlock:^{

    if (!weakOp.isCancelled) {

        [[NSOperationQueue mainQueue] addOperationWithBlock:^{
            //更新主线程
        }];         
    }
}];

[myOperationQueue addOperation:blockOp];
</code></pre>

<p>```</p>

<p>上面代码，block相互之间都是并行异步的。也就是说可以同时执行多个block，不同block之间不会相互阻塞。不用等待依赖其他block完成。block内部是顺序执行的。</p>

<p>通过添加依赖，来控制不同的NSBlockOperation之间是否完全并行执行。注意不要循环依赖导致死锁。</p>

<p>```</p>

<pre><code>NSBlockOperation *blockOp2 = [NSBlockOperation blockOperationWithBlock:^{
    //需要执行的任务
}];

//blockOp2 将等待至 blockOp 结束后，开始执行
[blockOp2 addDependency:blockOp];
[myOperationQueue addOperation:blockOp2];
</code></pre>

<p>```</p>

<hr />

<h4>子类化自定义NSOperation</h4>

<p>我们可以选择重写 <code>main</code> 方法，或者 <code>start</code> 方法，来实现。</p>

<ul>
<li>main：重写main方法，不需要手动管理太多状态，使用起来比较简单。</li>
</ul>


<p>```</p>

<pre><code>- (void)main {
    @autoreleasepool {

        //在这里，我们要频繁的检测 isCancelled 属性
        if(self.isCancelled){
            return;
        }
    }
}
</code></pre>

<p>```</p>

<ul>
<li><p>start：我们一般不会重写start，相对于重写main方法，处理上要更复杂些。要自己注意任务的一些状态比如isExecuting，isFinished，isConcurrent(isAsynchronous)，isReady。注意，当实现了start，就不会执行main。</p></li>
<li><p>dependency：任务之间添加依赖。有时候某一个任务，需要等待其他任务的结束后才能开始。这时候，相对于使用GCD的dispatch_barrier_async更容易理解一些。</p></li>
</ul>


<p>```</p>

<pre><code>//在op2的任务尚未执行时，添加依赖，op2将等待直到op完成
[op2 addDependency:op];
//移出op2的依赖
[op2 removeDependency:op];
</code></pre>

<p>```</p>

<ul>
<li>Completion block：任务完成后的回调，要注意此时并没有回到主线程。</li>
</ul>


<p>```</p>

<pre><code>__weak NSBlockOperation *weakOp = blockOp;
[blockOp setCompletionBlock:^{

    if ( !weakOp.isCancelled ) {
        [[NSOperationQueue mainQueue] addOperationWithBlock:^{

        }];
    }
}];
</code></pre>

<p>```</p>

<p>另外有几点需要注意：</p>

<ul>
<li><p>已经完成的任务，不能被重新执行。</p></li>
<li><p>已经添加到队列的任务，也不能被重复添加。</p></li>
<li><p>当我们对一个任务发送<code>cancel</code>消息时，属性isCancelled会变为YES。    不过，对于自定义的NSOperation来说，要格外注意些。</p>

<p>  在发送cancel消息的时候，如果任务还未开始执行(isExecuting == NO)，就会被 finished 并 从队列中 remove 。</p>

<p>  如果任务正在执行中，这时候任务不会被强制结束。所以这时候，我们要在main方法中，手动检测(isCancelled == YES)并处理。</p></li>
<li>isFinished等于YES，不代表任务成功完成。也可能任务被取消。所以有时候，我们在Completion block回调中，需要判断任务是否被取消。</li>
</ul>


<hr />

<h4>NSOperationQueue</h4>

<p>我们有两种不同的队列，主队列和自定义队列。主队列在主线程运行，自定义会开启子线程。</p>

<p>```</p>

<pre><code>NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  
NSOperationQueue *queue = [[NSOperationQueue alloc] init]; 
</code></pre>

<p>```</p>

<p>使用NSOperationQueue  的时候，系统默认会根据当前资源使用的情况，来为我们考虑最合适的线程数。当然我们也可以手动设置<code>maxConcurrentOperationCount</code>，限制使用的最大的线程数。更多的时候，其实我们不关心，交给系统处理就好。</p>

<ul>
<li><p>name：一般我们使用队列的时候，都要给一个队列名字，方便我们维护debug。</p></li>
<li><p>suspended：用来暂停和恢复队列中的所有任务。不能单独针对队列中的某一个任务。</p></li>
</ul>


<p>```</p>

<pre><code>// Suspend
[myOperationQueue setSuspended:YES];
... 
// Resume
[myOperationQueue setSuspended:NO]; 
</code></pre>

<p>```</p>

<ul>
<li>operationCount (readonly)：获取队列中还存在的正在执行的、等待执行的任务数量。注意，当任务一旦finished，就会从队列中remove。</li>
<li>cancelAllOperations：对队列所有的operations，发送<code>cancel</code>消息，将 isCancelled 属性设置为 YES 。如我们之前讨论过的，当operation 的 isExecuting 状态为 NO 时，operation 会被 finished 并从队列中 remove 。如果 isExecuting 状态为 YES ，那么我们自定义的operation，就要手动检测 isCancelled 属性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 JavaScriptCore <二>]]></title>
    <link href="http://MrBoog.github.io/blog/2015/02/10/shi-yong-javascriptcore-er/"/>
    <updated>2015-02-10T17:04:29+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/02/10/shi-yong-javascriptcore-er</id>
    <content type="html"><![CDATA[<h4>当JSExport 遇见 class_addProtocol</h4>

<p>之前我们已经大致了解了 JavaScriptCore的基础功能。下面我们想象一个这样的场景：</p>

<p>如果，我需要在JS中设置某个UIView的backgroundColor，那么我可以总么做呢？我们知道以下两点：</p>

<ul>
<li><p>通过创建继承于 JSExport 的协议，可以让Oc暴漏给JS使用。</p></li>
<li><p>通过 Runtime 的 class_addProtocol，我们可以给已经存在类添加协议。</p></li>
</ul>


<p>这样，我们是不是可以给UIView动态添加继承于 JSExport 的协议，协议里包含backgroundColor属性的setter和getter方法。是不是JS中就可以调用了呢？</p>

<p>代码如下：</p>

<p>```</p>

<pre><code>#import &lt;objc/runtime.h&gt;
#import &lt;JavaScriptCore/JavaScriptCore.h&gt;


@protocol UIViewExport &lt;JSExport&gt;
    - (void)setBackgroundColor:(UIColor *)backgroundColor;
    - (UIColor *)backgroundColor;
@end



- (void)viewDidLoad {
    [super viewDidLoad];

    class_addProtocol([UIView class],   @protocol(UIViewExport));


    JSContext *context = [[JSContext alloc] init];
    context[@"view"] = self.view;   
    context[@"color"] = [UIColor blueColor];

    [context evaluateScript:@" view.setBackgroundColor(color) "];
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>

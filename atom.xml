<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HuanLiu's Blog]]></title>
  <link href="http://MrBoog.github.io/atom.xml" rel="self"/>
  <link href="http://MrBoog.github.io/"/>
  <updated>2016-01-25T16:09:18+08:00</updated>
  <id>http://MrBoog.github.io/</id>
  <author>
    <name><![CDATA[HuanLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCD同步操作之 Barriers Groups Semaphore]]></title>
    <link href="http://MrBoog.github.io/blog/2016/01/10/gcd-synchron/"/>
    <updated>2016-01-10T21:41:55+08:00</updated>
    <id>http://MrBoog.github.io/blog/2016/01/10/gcd-synchron</id>
    <content type="html"><![CDATA[<p>在学会简单的使用GCD处理多线程之后，我们来再深入了解下GCD对多线程的一些控制。</p>

<h2>dispatch barriers</h2>

<p>在使用 Concurrent Queue 的时候，有时候我们希望队列中的某项任务，能够被串行执行，来避免资源竞争等多线程问题。比如遇到读写问题，这时候我们就需要使用 dispatch barriers。来保证即使在并行队列中，对某个对象的读和写操作，在同一时刻，只有一个可以被执行。这时候就可以用到 dispatch barriers了。下面我们来讨论一下，不同的队列中barriers的使用：</p>

<ul>
<li><p>Custom Serial Queue: 在串行队列中，队列都是顺序串行执行，使用barriers没有任何好处。一般来讲我们不需要这么做。</p></li>
<li><p>Global Concurrent Queue: 这里虽然是并行队列，但这个队列是全局的，我们不能保证别人没有使用这个队列。对这个队列加barriers，可能会影响到其他模块的功能。所以不建议在这个队列中使用。</p></li>
<li><p>Custom Concurrent Queue: 在自定义的并行队列中使用barriers，是比较合适的方式。</p></li>
</ul>


<p>所以当我们要做的并行操作，可能存在线程安全问题的时候。我们最好考虑新建自定义并行队列，而不是简单地使用系统提供的 Global Queue。</p>

<p>举一个例子，假设某一个类要管理MyClass这个类型的读写，下面列举这个类的一些相关方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  //初始化自定义并发队列
</span><span class='line'>  - (instancetype)init{
</span><span class='line'>      
</span><span class='line'>      if(self = [super init]){
</span><span class='line'>          customConcurrentQueue = dispatch_queue_create("com.customConcurrentQueue", DISPATCH_QUEUE_CONCURRENT); 
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  //写方法
</span><span class='line'>  - (void)write:(MyClass *)myClass {
</span><span class='line'>  
</span><span class='line'>      if( myClass ){
</span><span class='line'>          
</span><span class='line'>          //使用barrier，保证写方法，可以串行执行
</span><span class='line'>            dispatch_barrier_async(self.customConcurrentQueue, ^{ 
</span><span class='line'>              
</span><span class='line'>              //写操作
</span><span class='line'>              ...
</span><span class='line'>          });
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  //读方法
</span><span class='line'>  - (MyClass *)read{
</span><span class='line'>      
</span><span class='line'>      //要保证，读和写方法不能同时执行，
</span><span class='line'>      //首先，他们要在同一个队列中 ：self.customConcurrentQueue
</span><span class='line'>      //其次，读方法要等待读出数据后返回，所以应该是同步操作 ：dispatch_sync
</span><span class='line'>      
</span><span class='line'>      __block MyClass *myClass = [[MyClass alloc] init];
</span><span class='line'>      
</span><span class='line'>      dispatch_sync(self.customConcurrentQueue, ^{
</span><span class='line'>      
</span><span class='line'>          //读操作
</span><span class='line'>          myClass = ...
</span><span class='line'>      });
</span><span class='line'>      
</span><span class='line'>      return myClass;
</span><span class='line'>  }
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<hr />

<h2>dispatch groups</h2>

<p>有时候，我们需要在多个并行任务全部完成后，做一些操作，这时候就需要用到 group来管理了。</p>

<p>举一个简单的例子。我有4个任务要使用并发处理，任务4要等待，任务1、2、3完成后执行。同时，任务4不阻塞当前的线程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testDispatchGroup{
</span><span class='line'>
</span><span class='line'>  dispatch_queue_t concurrentQueue = dispatch_queue_create("com.test.testConcurrent", DISPATCH_QUEUE_CONCURRENT);
</span><span class='line'>
</span><span class='line'>  dispatch_group_t group = dispatch_group_create();
</span><span class='line'>
</span><span class='line'>  //异步操作
</span><span class='line'>  dispatch_group_async(group, concurrentQueue, ^{
</span><span class='line'>         
</span><span class='line'>      任务1
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  dispatch_group_async(group, concurrentQueue, ^{
</span><span class='line'>         
</span><span class='line'>      任务2
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  dispatch_group_async(group, concurrentQueue, ^{
</span><span class='line'>         
</span><span class='line'>      任务3
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  //dispatch_group_notify 中的block执行的是我们最后要做的任务。同时，这里是异步操作，不会阻塞后面其他代码的执行。
</span><span class='line'>  dispatch_group_notify(group, dispatch_get_main_queue(), ^{
</span><span class='line'>      
</span><span class='line'>      //前面3个任务，都执行完成后，执行里面的block
</span><span class='line'>      任务4
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>      ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>再看另一个需求，还是之前的4个任务。唯一的区别是，任务4除了要等待其他任务完成，还要阻塞当前线程：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)testDispatchGroup{
</span><span class='line'>
</span><span class='line'>  dispatch_group_t group = dispatch_group_create();
</span><span class='line'>
</span><span class='line'>  //异步操作
</span><span class='line'>  dispatch_group_async(group, concurrentQueue, ^{
</span><span class='line'>         
</span><span class='line'>      任务1
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  dispatch_group_async(group, concurrentQueue, ^{
</span><span class='line'>         
</span><span class='line'>      任务2
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>  dispatch_group_async(group, concurrentQueue, ^{
</span><span class='line'>         
</span><span class='line'>      任务3
</span><span class='line'>  });
</span><span class='line'>  
</span><span class='line'>  //dispatch_group_wait 等待上面任务全部完成，阻塞当前线程，直到超过设置的时间
</span><span class='line'>  //使用时，要注意避免阻塞主线程等问题
</span><span class='line'>  dispatch_group_wait(group, DISPATCH_TIME_FOREVER);
</span><span class='line'>  
</span><span class='line'>  任务4
</span><span class='line'>  
</span><span class='line'>  ...
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>另外，除了使用dispatch_group_async管理要做的任务。还可以使用<code>dispatch_group_enter</code>、 <code>dispatch_group_leave</code> 组合的方式，手动通知任务完成。如果使用手动管理的话，我们要注意：<code>enter和leave方法，应该是成对出现的</code>。</p>

<p>dispatch_group_enter(customGroup) : 手动告知customGroup，表示一个任务已经开始执行。</p>

<p>dispatch_group_leave(customGroup) : 手动告知customGroup，表示一个任务已经完成。当所有enter对应的leave方法都执行过后。我们的<code>dispatch_group_notify()</code>或者<code>dispatch_group_wait()</code>，就可以接到任务完成的通知。</p>

<hr />

<h2>dispatch semaphore 信号量</h2>

<p>当有多个消费者，访问有限的资源的时候，<a href="https://en.wikipedia.org/wiki/Semaphore_(programming)">信号量</a> 可以让我们更好的控制。简单来说，我们通过对信号个数的控制，来达到线程间的同步操作。当信号个数为0的时候，当前线程被阻塞，等待信号量增加，当信号量个数大于0的时候，则线程继续执行。</p>

<p>注意，同步的操作都要小心使用，避免死锁等问题。</p>

<p>另外，根据dispatch_semaphore_wait的返回值，可以用于判断某任务是否超时操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- (void)testSemaphore{
</span><span class='line'>
</span><span class='line'>  //创建 信号量 参数代表初始个数
</span><span class='line'>  dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  dispatch_async(concurrentQueue, ^{
</span><span class='line'>  
</span><span class='line'>      sleep(2);
</span><span class='line'>  
</span><span class='line'>      //发送一个信号，信号量个数 +1   
</span><span class='line'>      dispatch_semaphore_signal(semaphore);
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  dispatch_async(concurrentQueue, ^{
</span><span class='line'>  
</span><span class='line'>      dispatch_time_t timeoutTime = dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC);
</span><span class='line'>  
</span><span class='line'>      //线程等待，当信号量大于0时 任务继续执行，信号量 -1
</span><span class='line'>      //线程等待，超过预定的超时时间 任务继续执行 信号量不变
</span><span class='line'>      //关于返回值：当返回值 不为0 的时候，说明超时
</span><span class='line'>      if( dispatch_semaphore_wait(semaphore, timeoutTime) ){
</span><span class='line'>          NSLog(@"time out");
</span><span class='line'>      }
</span><span class='line'>  });
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD 同步与异步 串行与并行]]></title>
    <link href="http://MrBoog.github.io/blog/2015/12/14/gcd-part-1/"/>
    <updated>2015-12-14T15:25:27+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/12/14/gcd-part-1</id>
    <content type="html"><![CDATA[<p>先看一下GCD中的常见的术语</p>

<p>描述多个任务之间同一时刻的运行关系：</p>

<ul>
<li>serial（串行） 某一时刻，只执行一个任务</li>
<li>concurrent（并行） 可以同时执行多个任务</li>
</ul>


<p>侧重描述一个函数的执行完成，对其他任务的影响 (既 是否任务在等待某个函数完成，然后才可以运行)：</p>

<ul>
<li>synchronous（同步） 任务执行完成后reture，（阻塞）</li>
<li>asynchronous（异步） 不等待任务执行完成，立即reture，（不阻塞当前）</li>
</ul>


<p>在GCD中，我们用串行并行描述队列。这就是在描述，该队列里面的所有任务，相互之间在同一时刻，是怎样的运行关系。是指队列内本身的任务运行顺序。      <br/>
我们还用同步异步，描述某一个任务。比如说任务A是同步执行的。这就是在说，A任务，会阻塞当前任务，直到A结束。这是指不同任务之间的关系，与队列无关，可以是不同队列，也可以是相同队列。</p>

<p>接下来，我们先来看下，GCD里面的不同队列。</p>

<hr />

<h2>Serial Queues</h2>

<p>在串行队列里，同一时间只能执行一个任务。任务按照被添加进入队列的顺序依次执行。每一个任务只有在前面的任务完成后，才可以开始执行。</p>

<p>系统为我们提供的串行队列</p>

<ul>
<li><p>main queue ( dispatch_get_main_queue )</p>

<p>  main queue是一个串行队列，有串行队列的一切特性。比较特殊的一点是加入这个队列的任务，都是在主线程执行的。</p></li>
</ul>


<h2>Concurrent Queues</h2>

<p>加入并行队列的任务，执行的顺序也是按照任务被加入队列的顺序执行，这是我们唯一可以保证的。每个任务都不用等待之前的任务完成，同一时刻可以多个任务同时执行。</p>

<p>系统同样有一个全局的并发队列</p>

<ul>
<li><p>global dispatch queue ( dispatch_get_global_queue )</p>

<p>  这是另一个我们熟悉的并发队列，很多时候我们直接使用这个队列，可以简单处理一些我们需要并发执行的任务。</p></li>
</ul>


<h2>Custom Queue</h2>

<p>除了系统提供的全局队列之外，我们还可以自定义串行或者并行的队列。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", DISPATCH_QUEUE_SERIAL);
</span><span class='line'>
</span><span class='line'>    dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<p>上面是几种我们用GCD时，需要使用到的队列。</p>

<p>另外，使用GCD，除了选择正确的队列外，还要关注：我们要执行的任务是同步还是异步执行。</p>

<!--
同步执行 串行queue 
        并行queue

异步执行 串行queue 
        并行queue
-->


<hr />

<h2>dispatch_async  异步执行</h2>

<p>dispatch_async 用来用异步的方式执行串行或者并行队列里面的任务，我们来看一下使用 dispatch_async 的几种常见情况：</p>

<ul>
<li>custom Serial Queue：当我们需要执行几个应该串行执行的任务，又不阻塞当前的时候。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// task1 task2 顺序依次执行，同时不阻塞others
</span><span class='line'>
</span><span class='line'>dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", NULL);
</span><span class='line'>
</span><span class='line'>dispatch_async(mySerialQueue, ^{
</span><span class='line'>   ...task1
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>dispatch_async(mySerialQueue, ^{
</span><span class='line'>  ...task2
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>...others
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>main Queue：当我们执行并完成了一段异步的任务，需要回到主线程更新UI的时候，很常见的选择就是使用GCD的 main queue。</p></li>
<li><p>custom or global concurrent Queue：这个是我们执行非UI任务的常见选择。要注意的是，加入队列的多个任务之间并发执行，我们无法知道那个任务先完成。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);
</span><span class='line'>
</span><span class='line'>dispatch_async(myConcurrentQueue, ^{
</span><span class='line'>  
</span><span class='line'>  ...task1    
</span><span class='line'>    dispatch_async(dispatch_get_main_queue(), ^{
</span><span class='line'>          Update UI 
</span><span class='line'>    });
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>dispatch_sync 同步执行</h2>

<p>大部分时候我们执行dispatch_sync操作，都要格外小心些。</p>

<ul>
<li>custom or main Serial Queue： 同步执行串行队列时，要注意防止发生死锁，比如下面的代码:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//串行队列中，task2 等待 task1完成，所以不会开始。而task1又完成不了，因为task2还没有执行完(甚至都没有开始)。死锁。
</span><span class='line'>  
</span><span class='line'>    dispatch_queue_t mySerialQueue = dispatch_queue_create("com.mySerialQueue", DISPATCH_QUEUE_SERIAL);
</span><span class='line'>    
</span><span class='line'>    dispatch_sync(mySerialQueue, ^{
</span><span class='line'>        
</span><span class='line'>        ...task1
</span><span class='line'>        dispatch_sync(mySerialQueue, ^{
</span><span class='line'>           
</span><span class='line'>           ...task2            
</span><span class='line'>        });
</span><span class='line'>    });
</span><span class='line'>    
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<ul>
<li>concurrent Queue：合理使用可以解决一些并发读写问题。例如</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//task1 执行结束后，task2才会开始执行。
</span><span class='line'>    dispatch_queue_t myConcurrentQueue = dispatch_queue_create("com.myConcurrentQueue", DISPATCH_QUEUE_CONCURRENT);
</span><span class='line'>
</span><span class='line'>    dispatch_sync(myConcurrentQueue, ^{
</span><span class='line'>        
</span><span class='line'>      ...task1 读
</span><span class='line'>    });
</span><span class='line'>    
</span><span class='line'>    dispatch_async(myConcurrentQueue, ^{
</span><span class='line'>        
</span><span class='line'>      ...task2 写
</span><span class='line'>    });</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>dispatch_after</h2>

<p>异步延迟操作。实际上 dispatch_after 就像一个延迟执行的 dispatch_async。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>double delayInSeconds = 1.0;
</span><span class='line'>dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
</span><span class='line'> dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
</span><span class='line'>
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于NSOperation]]></title>
    <link href="http://MrBoog.github.io/blog/2015/09/30/guan-yu-nsoperation/"/>
    <updated>2015-09-30T17:56:07+08:00</updated>
    <id>http://MrBoog.github.io/blog/2015/09/30/guan-yu-nsoperation</id>
    <content type="html"><![CDATA[<p>NSOperation 是 abstract class 抽象类，不能直接使用，我们使用的时候，一般要子类化，或者直接使用系统提供的两个子类：</p>

<ul>
<li>NSInvocationOperation</li>
<li>NSBlockOperation</li>
</ul>


<p>虽然GCD使用起来很方便，但使用不当也会暴露一些问题，比如对任务状态的不好控制等。这可能导致有些我们本来需要取消掉的任务，一直在运行，占用资源。这些情况下我们可以考虑通过 NSOperationQueue 加强对任务的控制。</p>

<hr />

<h4>NSInvocationOperation</h4>

<p>NSInvocationOperation是抽象类NSOperation的实体子类，可以直接使用。如果不结合NSOperationQueue，单独通过调用 start方法使用，NSInvocationOperation是非并发的操作。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    // 通过 start 直接调用，任务将在主线程中执行。
</span><span class='line'>    NSInvocationOperation *invocationOp = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(doSomeThingWithInvocation:) object:nil];
</span><span class='line'>    [invocationOp start];
</span><span class='line'>
</span><span class='line'>  // 或者通过 addOperation 将任务加入队列，可在子线程中执行
</span><span class='line'>  myOperationQueue = [[NSOperationQueue alloc] init];
</span><span class='line'>  [myOperationQueue addOperation:invocationOp];
</span></code></pre></td></tr></table></div></figure>


<p>当然，在swift中,NSInvocation相关的类，都已经去掉了(不知道以后会不会加入)，也许NSInvocationOperation也是退出历史舞台的节奏。</p>

<hr />

<h4>NSBlockOperation</h4>

<p>NSBlockOperation也是NSOperation的子类，只是跟NSInvocationOperation使用NSInvocation不同，NSBlockOperation使用block，使用起来会更方便。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  myOperationQueue = [[NSOperationQueue alloc] init];        
</span><span class='line'>  NSBlockOperation *blockOp = [NSBlockOperation blockOperationWithBlock:^{
</span><span class='line'>        //需要执行的任务
</span><span class='line'>    }];
</span><span class='line'>    
</span><span class='line'>    [blockOp addExecutionBlock:^{
</span><span class='line'>        //需要执行的任务
</span><span class='line'>    }];
</span><span class='line'>    
</span><span class='line'>    // finished属性为YES后(完成或者被取消)将会执行
</span><span class='line'>    __weak NSBlockOperation *weakOp = blockOp;
</span><span class='line'>    [blockOp setCompletionBlock:^{
</span><span class='line'>      
</span><span class='line'>      if (!weakOp.isCancelled) {
</span><span class='line'>      
</span><span class='line'>          [[NSOperationQueue mainQueue] addOperationWithBlock:^{
</span><span class='line'>              //更新主线程
</span><span class='line'>          }];         
</span><span class='line'>      }
</span><span class='line'>    }];
</span><span class='line'>
</span><span class='line'>  [myOperationQueue addOperation:blockOp];</span></code></pre></td></tr></table></div></figure>


<p>上面代码，block相互之间都是并行异步的。也就是说可以同时执行多个block，不同block之间不会相互阻塞。不用等待依赖其他block完成。block内部是顺序执行的。</p>

<p>通过添加依赖，来控制不同的NSBlockOperation之间是否完全并行执行。注意不要循环依赖导致死锁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  NSBlockOperation *blockOp2 = [NSBlockOperation blockOperationWithBlock:^{
</span><span class='line'>      //需要执行的任务
</span><span class='line'>    }];
</span><span class='line'>    
</span><span class='line'>    //blockOp2 将等待至 blockOp 结束后，开始执行
</span><span class='line'>    [blockOp2 addDependency:blockOp];
</span><span class='line'>  [myOperationQueue addOperation:blockOp2];
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>子类化自定义NSOperation</h4>

<p>我们可以选择重写 <code>main</code> 方法，或者 <code>start</code> 方法，来实现。</p>

<ul>
<li>main：重写main方法，不需要手动管理太多状态，使用起来比较简单。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  - (void)main {
</span><span class='line'>      @autoreleasepool {
</span><span class='line'>
</span><span class='line'>          //在这里，我们要频繁的检测 isCancelled 属性
</span><span class='line'>          if(self.isCancelled){
</span><span class='line'>              return;
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>start：我们一般不会重写start，相对于重写main方法，处理上要更复杂些。要自己注意任务的一些状态比如isExecuting，isFinished，isConcurrent(isAsynchronous)，isReady。注意，当实现了start，就不会执行main。</p></li>
<li><p>dependency：任务之间添加依赖。有时候某一个任务，需要等待其他任务的结束后才能开始。这时候，相对于使用GCD的dispatch_barrier_async更容易理解一些。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  //在op2的任务尚未执行时，添加依赖，op2将等待直到op完成
</span><span class='line'>  [op2 addDependency:op];
</span><span class='line'>  //移出op2的依赖
</span><span class='line'>  [op2 removeDependency:op];
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Completion block：任务完成后的回调，要注意此时并没有回到主线程。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    __weak NSBlockOperation *weakOp = blockOp;
</span><span class='line'>    [blockOp setCompletionBlock:^{
</span><span class='line'>        
</span><span class='line'>        if ( !weakOp.isCancelled ) {
</span><span class='line'>            [[NSOperationQueue mainQueue] addOperationWithBlock:^{
</span><span class='line'>
</span><span class='line'>            }];
</span><span class='line'>        }
</span><span class='line'>    }];</span></code></pre></td></tr></table></div></figure>


<p>另外有几点需要注意：</p>

<ul>
<li><p>已经完成的任务，不能被重新执行。</p></li>
<li><p>已经添加到队列的任务，也不能被重复添加。</p></li>
<li><p>当我们对一个任务发送<code>cancel</code>消息时，属性isCancelled会变为YES。    不过，对于自定义的NSOperation来说，要格外注意些。</p>

<p>  在发送cancel消息的时候，如果任务还未开始执行(isExecuting == NO)，就会被 finished 并 从队列中 remove 。</p>

<p>  如果任务正在执行中，这时候任务不会被强制结束。所以这时候，我们要在main方法中，手动检测(isCancelled == YES)并处理。</p></li>
<li>isFinished等于YES，不代表任务成功完成。也可能任务被取消。所以有时候，我们在Completion block回调中，需要判断任务是否被取消。</li>
</ul>


<hr />

<h4>NSOperationQueue</h4>

<p>我们有两种不同的队列，主队列和自定义队列。主队列在主线程运行，自定义会开启子线程。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  NSOperationQueue *mainQueue = [NSOperationQueue mainQueue];  
</span><span class='line'>  NSOperationQueue *queue = [[NSOperationQueue alloc] init]; </span></code></pre></td></tr></table></div></figure>


<p>使用NSOperationQueue  的时候，系统默认会根据当前资源使用的情况，来为我们考虑最合适的线程数。当然我们也可以手动设置<code>maxConcurrentOperationCount</code>，限制使用的最大的线程数。更多的时候，其实我们不关心，交给系统处理就好。</p>

<ul>
<li><p>name：一般我们使用队列的时候，都要给一个队列名字，方便我们维护debug。</p></li>
<li><p>suspended：用来暂停和恢复队列中的所有任务。不能单独针对队列中的某一个任务。</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>// Suspend
</span><span class='line'>[myOperationQueue setSuspended:YES];
</span><span class='line'>... 
</span><span class='line'>// Resume
</span><span class='line'>[myOperationQueue setSuspended:NO];   </span></code></pre></td></tr></table></div></figure>


<ul>
<li>operationCount (readonly)：获取队列中还存在的正在执行的、等待执行的任务数量。注意，当任务一旦finished，就会从队列中remove。</li>
<li>cancelAllOperations：对队列所有的operations，发送<code>cancel</code>消息，将 isCancelled 属性设置为 YES 。如我们之前讨论过的，当operation 的 isExecuting 状态为 NO 时，operation 会被 finished 并从队列中 remove 。如果 isExecuting 状态为 YES ，那么我们自定义的operation，就要手动检测 isCancelled 属性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random in iOS]]></title>
    <link href="http://MrBoog.github.io/blog/2014/06/09/random-in-ios/"/>
    <updated>2014-06-09T23:10:41+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/06/09/random-in-ios</id>
    <content type="html"><![CDATA[<p>生成随机数   <br/>
arc4random(void)//不够平衡<br/>
推荐    <br/>
arc4random_uniform(u_int32_t)</p>

<p>生成 [0 , n )，之间的随机数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSUInteger foo = arc4random_uniform(n);</span></code></pre></td></tr></table></div></figure>


<p>生成 [minimum , maximum]，之间的随机数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSUInteger foo = arc4random_uniform((maximum - minimum) + 1) + minimum;</span></code></pre></td></tr></table></div></figure>


<p>除整数之外，产生(0 , 1)，之前的随机数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//先种随机种子
</span><span class='line'>srand48(time(0));
</span><span class='line'>double foo = drand48();</span></code></pre></td></tr></table></div></figure>


<p>延伸一下，随机取数组中的元素：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//arc4random_uniform(n) 随机范围是[0，n），可直接用于数组下标
</span><span class='line'>if ([array count] &gt; 0) {
</span><span class='line'>  id obj = array[arc4random_uniform([array count])];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>没有使用NSSet，却想打乱顺序：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSMutableArray *mutableArray = [NSMutableArray arrayWithArray:array];
</span><span class='line'>NSUInteger count = [mutableArray count];
</span><span class='line'>// See http://en.wikipedia.org/wiki/Fisher–Yates_shuffle
</span><span class='line'>if (count &gt; 1) {
</span><span class='line'>  for (NSUInteger i = count - 1; i &gt; 0; --i) {
</span><span class='line'>      [mutableArray exchangeObjectAtIndex:i withObjectAtIndex:arc4random_uniform((int32_t)(i + 1))];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>NSArray *randomArray = [NSArray arrayWithArray:mutableArray];</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 应用的国际化]]></title>
    <link href="http://MrBoog.github.io/blog/2014/04/26/ios-guo-ji-hua-zhuan/"/>
    <updated>2014-04-26T23:03:17+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/04/26/ios-guo-ji-hua-zhuan</id>
    <content type="html"><![CDATA[<p>2014 年 4 月 23 日更新：本文最初由 <a href="http://twitter.com/regularberry">Sean Berry</a> 编写， 因为 iOS 7，现在由 <a href="http://www.raywenderlich.com/u/ali.hafizji">Ali Hafizji</a> 将此文全面更新。</p>

<p>创造出色应用算得上是不小的壮举，除开伟大的代码、华丽的设计以及直观的交互外，还有更多要做的事。要爬上 App Store 的排行榜需要适时的产品营销、跟随着用户群不断扩大的能力，以及利用工具和技术尽可能广泛地达到越多的受众越好。</p>

<p>国际市场对许多开发者来说是事后考虑，但感谢由 App Store 所提供的无痛的全球分发系统，任何 iOS 开发者要将他们的应用在超过 150 个国家的市场发布，只需要一个简单的点击。亚洲和欧洲分别代表着一个不断增长的潜在客户群，他们中的大多数人都不以英语为母语，但为了充分发掘你的应用在全球市场的潜力，你至少要将应用的国际化语言做好。</p>

<p>本教程将对一个叫做 <code>iLikeIt</code> 的简单应用添加国际化支持来引导你学一遍国际化的基本内容。这个简单的应用有一个 Label 和一个 <code>You Like?</code> Button。无论用户何时点击 <code>You Like?</code> ，一些乐观的销售数据和对应的图片就在按钮下以淡入的方式出现。</p>

<p>但目前，这个应用还只支持英文—— os vamos a traducir!</p>

<blockquote><p>Note：国际化的另一个重要方面是使用 Auto Layout 去处理文字大小的变化。然而，为了保持本教程的简单，我们不会专注于 Auto Layout ，但我们为其准备有<a href="http://www.raywenderlich.com/64392/video-tutorial-beginning-auto-layout">另外的教程</a>。</p></blockquote>

<h2>国际化 vs 本地化</h2>

<p>在你开始本教程之前，明白国际化与本地化的区别非常重要，而这些内容常常让人困惑。</p>

<p>简单地说，国际化是为国际化能力而设计你的应用的过程。举例来说：</p>

<ul>
<li>以用户的母语处理文字地输入、输出。</li>
<li>处理不同的日期、时间以及数字格式。</li>
<li>利用适当的日历和时区来处理数据。</li>
</ul>


<p>国际化对于你（开发者）来说是一个小活动，即利用系统提供的 API 来增添或修改你的代码以使得你的应用在中文或阿拉伯语下同在英文下一样好。</p>

<p>对比之下，本地化仅仅是将应用的用户界面和资源翻译至不同的语言，这是一些你能够且应该交给别人的事情，除非碰巧你精通你的应该所支持的每一种语言。:]</p>

<h2>开始</h2>

<p>第一步就来<a href="http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/StarterKit.zip">下载</a> iLikeIt 启动项目，整篇教程里都会用到它。</p>

<p>用 Xcode 5 打开项目，并在模拟器中运行。在按下 <code>You like?</code> 之后你会看到如下界面：</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/starter_project_screenshot.png" alt="Starter product screenshot" /></p>

<p>如你在截图中所见的，你需要本地化 4 个元素：</p>

<ul>
<li>UI 元素：<code>Hello</code> Label</li>
<li>UI 元素：<code>You like?</code> Button</li>
<li>销售数据文本：<code>Yesterday you sold 1000000 apps</code></li>
<li>图像文本：<code>I LIKE IT</code></li>
</ul>


<p>花点时间浏览一下文件和目录，使自己熟悉项目结构。 <code>Main.storyboard</code> 包含一个单视图屏幕，它是 <code>ViewController</code> 类的实例。</p>

<h2>从代码中分离文本</h2>

<p>目前，所有应用显示的文本都以硬编码的方式存放在 <code>Main.storyboard</code> 和 <code>ViewController</code> 里。为了本地化这些字符串，你就要将它们放在单独的文件中。为了避免将它们硬编码到你的方法里，你只需简单地从该文件引用这些字符串即可。</p>

<p>Xcode 使用以 &ldquo;.strings&rdquo; 为扩展名的多个文件来存储和检索所有能用于应用的字符串，以支持多种语言。你的代码中的一个简单方法将会根据当前 iOS 设备的语言去查找并返回所需要的字符串。</p>

<p>那就让我们来试试看。打开菜单 <code>File &gt; New &gt; File</code>，选择 Resource 下 <code>Strings Fils</code> ，如下所示：</p>

<p><img src="http://cdn3.raywenderlich.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-07-at-4.30.35-pm-700x471.png" alt="Choose strings file" /></p>

<p>点击 <code>Next</code> ，将文件命名为 <code>Localizable.strings</code> ，然后点击 <code>Save</code>。</p>

<blockquote><p>注意：<code>Localizable.strings</code> 是 iOS 用于本地化文本的默认文件名。请抗拒将其改名的冲动，否则你将在每次引用本地化字符串时都要去输入一遍你的 .strings 文件名。</p></blockquote>

<p>现在，你已经创建了 <code>Localizable.strings</code> 文件，你需要添加所有目前硬编码在应用里的文本。你将按照如下简单的特定规则来做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"KEY" = "CONTENT";</span></code></pre></td></tr></table></div></figure>


<p>这些 键/内容 对（key/content pairs） 就像一个 NSDictionary ，而惯例是使用默认语言的翻译作为内容的键值，例如对于 <code>You Like?</code> ，你就这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"You like?" = "You like?";</span></code></pre></td></tr></table></div></figure>


<p>键/内容 对 同样可以包含格式化字符串：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Yesterday you sold %@ apps" = "Yesterday you sold %@ apps";</span></code></pre></td></tr></table></div></figure>


<p>现在切换到 <code>ViewController.m</code> ，找到 <code>viewDidLoad</code> 方法。目前应用如下设置 likeButton 和 salesCountLabel ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_salesCountLabel.text = [NSString stringWithFormat:@"Yesterday you sold %@ apps", @(1000000)];
</span><span class='line'>[_likeButton setTitle:@"You like?" forState:UIControlStateNormal];</span></code></pre></td></tr></table></div></figure>


<p>作为替代，你需要从 <code>Localizable.strings</code> 文件里读取字符串。那把这两行都用一个叫做 的 <code>NSLocalizedString</code> 宏进行修改，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_salesCountLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Yesterday you sold %@ apps", nil), @(1000000)];
</span><span class='line'>[_likeButton setTitle:NSLocalizedString(@"You like?", nil) forState:UIControlStateNormal];</span></code></pre></td></tr></table></div></figure>


<p>所谓宏，即它们包裹一个稍长的代码片段为更易管理的长度，并使用 <code>#define</code> 指令创建。</p>

<p>如果你好奇 <code>NSLocalizedString</code> 宏在后面做了什么，按着 Control 在 <code>NSLocalizedString</code> 上点击，它的定义就会显示出来，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define NSLocalizedString(key, comment) 
</span><span class='line'>    [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]</span></code></pre></td></tr></table></div></figure>


<p><code>NSLocalizedString</code> 宏根据当前的语言设置使用 <code>localizedStringForKey</code> 方法去查找给定键值的字符串。它传递 nil 给 table name，所以它使用默认的 strings 文件名（即 <code>Localizable.strings</code>）。对于完整细节，请看 Apple 的 <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/Reference/Reference.html">NSBundle Class Reference</a>。</p>

<blockquote><p>Note：这个宏接受一个注释作为参数，但似乎没什么用。这是因为除了亲手在 <code>Localizable.strings</code> 中键入每个 key/value pair 之外，你还可以使用 iOS SDK 提供的一个叫做 <code>genstrings</code> 的工具来自动做到这一点（这对于大型项目相当方便）。<br/>
如果你使用这个方法，你可以在每个字符串上放一个注释，它们会显示在默认字符串的旁边以作为翻译者的辅助。例如，你可以添加一个注释指明字符串被使用在怎样的上下文里。</p></blockquote>

<p>好，已经有了足够的背景信息——让我们开搞！</p>

<p>编译并运行你的项目，它应该和之前一样在主屏幕上显示同样的文本，但西班牙语在哪里？现在你的应用已经设置好本地化，添加翻译不在话下。</p>

<h2>添加西班牙语本地化</h2>

<p>要支持另外一种语言，点击左边窗格里蓝色的 iLikeIt 项目文件夹，在右边的窗格里选择 <code>Project</code>（注意不是 Target），然后在 info 标签下你将看到一个 <code>Localizations</code> 分段。点击 <code>+</code> 然后选择 <code>Spanish (es)</code> 。</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2014/03/localization_steps-700x457.png" alt="Adding Spanish" /></p>

<p>之后出现的屏幕会询问你哪些文件需要做本地化。让它们全部保持选中状态，然后单击 <code>Finish</code> 。注意：<code>Localizable.strings</code> 没有显示在这个列表里，先不要慌张！</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2014/03/select_files_to_localize-700x470.png" alt="Select files to localize" /></p>

<p>在这个点上，Xcode 已经在后面设置好一些目录，它们包含有不同版本的 <code>InfoPlist.strings</code> 和 <code>Main.storyboard</code> 以适合你所选择的语言。你可以打开项目文件夹自己看看，大概如下所示：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2014/03/project_structure.png" alt="New project structure" /></p>

<p>看到 <code>en.lproj</code> 和 <code>es.lproj</code> 了吗？它们包含有特定语言版本的文件。</p>

<p><code>en</code> 是 English 的本地化代号， <code>es</code> 就是 Spanish 的本地化代号。请看一个这个<a href="http://www.loc.gov/standards/iso639-2/php/English_list.php">完整的语言代号列表</a>，以获取其他语言的代号。</p>

<p>从现在开始，当你的应用想要得到英语版的某个文件，它就会去 <code>en.lproj</code> 找，而当它想要西班牙语版的某个文件，它就会去 <code>es.lproj</code> 找。</p>

<p>就是这么简单！将你的资源文件放在合适的文件夹里，iOS 就会负责剩下的事情。</p>

<p>但先等一下，<code>Localizable.strings</code> 呢？要让 Xcode 知道你想让它本地化，在左窗格里选中这个文件，然后在右边窗格里打开 <code>File Inspector</code>。你会看到一个叫做 <code>Localize</code> 的按钮，点击它，选择英语（因为它目前就只有英语），最后点击 <code>Localize</code>。</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2014/03/Localize_button-700x457.png" alt="Localize button" /></p>

<p>现在 <code>File Inspector</code> 窗格会显示这个文件属于哪些语言。目前，如你所见，这个文件只有英文的本地化。点击 <code>Spanish</code> 左边的 box 就可以添加西班牙语的本地化了。</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/03/select_spanish_button.png" alt="Select spanish button" /></p>

<p>回到左边窗格并点击 <code>Localizable.strings</code> 前面的小箭头，就会显示出子元素。你会看到有两个版本的文件：一个是为英语准备的，另一个是为西班牙语准备的：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2014/03/localization_files.png" alt="Localization files" /></p>

<p>要修改西班牙语的文本，选择 <code>Localizable.strings (Spanish)</code> 并用下面显示的文体替换它的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Yesterday you sold %@ apps" = "Ayer le vendi&oacute; %@ aplicaciones";
</span><span class='line'>"You like?" = "~Es bueno?~";</span></code></pre></td></tr></table></div></figure>


<p>恭喜恭喜！你的应用现在支持双语了！</p>

<p>为了测试一切工作正常，更改你的模拟器/设备的显示语言为西班牙语，打开 <code>设置(Settings)</code> 应用：通用->多语言环境->语言->Espanol</p>

<p>如果你还在运行 Xcode debugger ，先 <code>Stop</code> ，再重新编译并运行应用，你将看到：</p>

<p><img src="http://cdn3.raywenderlich.com/wp-content/uploads/2014/03/espanol_version-308x500.png" alt="Spanish version" /></p>

<h2>语言环境 vs 语言</h2>

<p>1 百万是个相当不错的销售数字；让我们为其添加一点格式，使之看起来更棒！</p>

<p>打开 <code>ViewController.m</code> 并将设置 <code>_salesCountLabel</code> 的那些行用下列语句替换：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
</span><span class='line'>[numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
</span><span class='line'>NSString *numberString = [numberFormatter stringFromNumber:@(1000000)];
</span><span class='line'>_salesCountLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Yesterday you sold %@ apps", nil), numberString];</span></code></pre></td></tr></table></div></figure>


<p>编译并运行应用，现在数字看起来更加易读了：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/03/number_formatted-308x500.png" alt="Number formatted" /></p>

<p>这在美国人看了很棒，但在西班牙 1 百万写作 “1.000.000″ 而不是 “1,000,000″ 。在西班牙语下运行应用，你就会看到分隔0的还是逗号。因为在 iOS 中，数字的格式化基于地区/国家，而不是语言，所以为了观察西班牙的某个人会看到怎样的销售数字，打开 <code>设置（Settings.app）</code> 通过导航到 <code>通用General -&gt; 多语言环境International -&gt;区域格式Region Format -&gt; Spanish -&gt; Spain</code> 来修改语言环境：</p>

<p><img src="http://cdn3.raywenderlich.com/wp-content/uploads/2014/03/spanish_region_format-308x500.png" alt="Spanish region format" /></p>

<p>再次编译并运行应用，你就会看到格式正确的数字：</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2014/03/spain_number_formatting-308x500.png" alt="Spain number formatting" /></p>

<p>额外的说明，<code>NSNumberFormatter</code> 自动地以合适的区域格式化你的数字。只要有可能，请抗拒重新发明轮子的冲动，因为在 iOS 上，按着 Apple 的方式做事才有回报。</p>

<h2>国际化 Storyboard</h2>

<p>你的 Storyboard 中的 UI 元素，例如 Label、Button 以及图片可以用代码设置，也可以直接在 Storyboard 里设置。你已经学了如何用编程的方式设置文本以支持多种语言，但屏幕顶部的 &ldquo;Hello&rdquo; Label 没有 <code>IBOutlet</code> 只能在 <code>Main.storyboard</code> 中设置他的文本。</p>

<p>当然你可以添加一个 IBOutlet 将其连接到 <code>Main.storyboard</code> 中的 Label 上，然后使用 <code>NSLocalizedString</code> 设置它的 text 属性，就像 <code>likeButton</code> 和 <code>salesCountLabel</code> 那样。但这里还有一个更加简单的方式能本地化 Storyboard 元素，而不需要任何代码。</p>

<p>点击  Main.storyboard 左边的小三角形，你就会看到 <code>Main.storyboard (Base)</code> 和 <code>Main.storyboard (Spanish)</code> 。点击 <code>Main.storyboard (Spanish)</code> 打开 编辑器可以看到本地化文本。你已有了一个 Hello Label 的入口，它看起来如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* Class = "IBUILabel"; text = "Hello"; ObjectID = "pUp-yc-27W"; */
</span><span class='line'>"pUp-yc-27W.text" = "Hello";</span></code></pre></td></tr></table></div></figure>


<p>用西班牙语翻译 &ldquo;Hola&rdquo; 替换其中的两个 &ldquo;Hello&rdquo; ，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* Class = "IBUILabel"; text = "Hola"; ObjectID = "pUp-yc-27W"; */
</span><span class='line'>"pUp-yc-27W.text" = "Hola";</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note：永远不要直接修改自动生成的 ObjectID。同样，不要直接复制粘贴上面的代码，因为你的 Label 的 ObjectID 很可能跟上面的不一样。</p></blockquote>

<h2>图片的国际化</h2>

<p>因为应用使用的一个图像包含有英文字符，所以你还需要本地化它。如果西班牙语应用里有一些英文片段不止是看起来很业余，同时也有损于它的整体可用性和市场潜力。</p>

<p>要本地化图片，首先下载这个西班牙语的图片（在大多数浏览器上都是：右键－>存储图像为…）</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/megusta.png" alt="Me Gusta" /></p>

<p>打开 <code>Images.xcassets</code> 并通过拖动将刚下载的这个 <code>megusta.png</code> 到左边的图片列表以添加到资产目录（asset catalog）。资产目录不能被国际化，所以你需要使用一个简单的解决办法来本地化这个图像。</p>

<p>打开 <code>Localizable.strings (English)</code> 并添加下面一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"imageName" = "ilike";</span></code></pre></td></tr></table></div></figure>


<p>类似地，添加下面一行到 <code>Localizable.strings (Spanish)</code> ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"imageName" = "megusta";</span></code></pre></td></tr></table></div></figure>


<p>从现在开始，你将使用 <code>imageName</code> 作为 key 来检索本地化版本的图像。打开 ViewController.m 并添加如下一行代码到 <code>viewDidLoad</code> 方法中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[_imageView setImage:[UIImage imageNamed:NSLocalizedString(@"imageName", nil)]];</span></code></pre></td></tr></table></div></figure>


<p>译者注：这样使用资源目录真的好吗？</p>

<p>如果有必要，将 模拟器/设备 切换到西班牙语，然后编译并运行，你就会看到本地化版本的图像显示出来了。</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2014/03/spanish_image-308x500.png" alt="Spanish image" /></p>

<p>恭喜！你已经拥有了能本地化应用到多种不同语言的全部工具。</p>

<blockquote><p>Note：这种方法，适用于每个语言都有不同的文件名。一个更好的方法可能是本地化一个资源文件夹，如<a href="http://stackoverflow.com/questions/13921833/how-can-i-localize-a-folder-of-images-for-ios">此文</a>所描述的。</p></blockquote>

<p>译者注：果然有更好的方法！</p>

<h2>无偿奖励</h2>

<p>作为最后的奖励，让我们本地化应用的名字吧。你的 <code>Info.plist</code> 有一个特殊的文件（<code>InfoPlist.strings</code>），为了适用不同的语言，你可以在它里面以设置一个字符串去覆盖原本的名字设定。要在西班牙语下给应用一个不同的名字，打开 <code>Supporting Files &gt; InfoPlist.strings (Spanish)</code> 并插入下面一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"CFBundleDisplayName" = "Me Gusta";</span></code></pre></td></tr></table></div></figure>


<h2>练习：国际化音频文件</h2>

<p>如果你已经走到这么远，那么你应该对国际化的基本知识比较熟悉了。这是个简单的练习，通过处理这两个不同的音频文件，你可以测试一下自己新掌握的知识。这两个音频文件一个是英语的，另一个是西班牙语的。根据用户选择的语言播放合适的文件即可。</p>

<p>下面是必要步骤的简短描述：</p>

<ol>
<li>下载音频文件。</li>
<li>先拷贝 <code>box-en.wav</code> 到项目中。</li>
<li>打开音频文件的 file inspector 并点击 localize 按钮，确保你选择了英语和西班牙语作为支持的语言。</li>
<li>重命名第二个音频文件（box-es.wav），使其和第一个的名字（box-en.wav）一样，然后将其拷贝到 <code>es.Iproj</code> 文件夹中。</li>
<li>确保在 Finder 提示时选择 “替换文件”</li>
</ol>


<h2>下一步该怎么走？</h2>

<p>这里是<a href="http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/Final-Project.zip">最终的项目</a>，包含有上面的教程中你所编写的所有代码。</p>

<p>现在你知道了国际化一个 iPhone 应用的基本技术，那就为你的某个旧应用或在设计下一个应用时添加一门外语吧。正如你所看到的，这几乎不花时间，而且能将应用推给更广泛、更多样化的受众，那些不会英语的受众会因此而感激你！</p>

<p>对于具体的翻译，你也许可以使用 Google 在 <a href="http://www.google.com/translate">http://www.google.com/translate</a> 提供的免费翻译服务，但它的结果可能有错误。如果你能花上一点钱，那有好几个 <a href="https://developer.apple.com/internationalization/">列在苹果公司的国际化和本地化页面底部的第三方供应商</a> 可以选择。不同的供应商的价格稍有差异，但基本上都少于每个单词 10 美分。</p>

<hr />

<p>本文翻译至 <a href="http://www.raywenderlich.com/64401/internationalization-tutorial-for-ios-2014">http://www.raywenderlich.com/64401/internationalization-tutorial-for-ios-2014</a></p>

<p>原作者：<a href="http://www.raywenderlich.com/u/ali.hafizji">Ali Hafizji</a></p>

<p>译者：<a href="https://twitter.com/nixzhu">@nixzhu</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LLDB以及扩展插件chisel浅析]]></title>
    <link href="http://MrBoog.github.io/blog/2014/04/17/lldb/"/>
    <updated>2014-04-17T23:36:03+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/04/17/lldb</id>
    <content type="html"><![CDATA[<p>苹果的开源项目<a href="http://llvm.org/releases/download.html">LLVM</a>，改变了编译器市场，也为行业做出了突出贡献。据苹果所说，这项技术使得苹果平台，反映速度更快更加安全。对于开发者，苹果也带来了新的调试工具:LLDB。</p>

<p>我们在开发中经常要调试程序。调试的时候，熟练使用断点加LLDB命令配合，的确能提高工作的效率。</p>

<p>Xcode的编译器，已经从GCC转到<a href="http://clang.llvm.org/">Clang</a>。调试工具也由gdb转为lldb。这篇文章可以看到他们的命令区别：<a href="http://lldb.llvm.org/lldb-gdb.html">http://lldb.llvm.org/lldb-gdb.html</a>。</p>

<p>学习lldb的过程，是不断积累的过程。建议多使用help命令，来查看命令的详细说明。    <br/>
如：<code>p(expr)、po(expr -o)、bt、br、image、process、thread</code>等等。</p>

<p>有时候，命令使用不对，会遇到一些错误。例如下面所示：</p>

<pre><code>(lldb) p [self.view frame]          
error: 'frame' has unknown return type; cast the call to its declared return type
error: 1 errors parsing expression      
(lldb) p [[self.view subviews] count]
error: no known method '-count'; cast the message send to the method's return type
error: 1 errors parsing expression
</code></pre>

<p>这时候，就要根据error的提示信息，检查命令的格式了。对于上面的错误，我们就显示声明一下‘frame’的类型，做如下调整：</p>

<pre><code>(lldb) p (CGRect)[self.view frame]          
(CGRect) $0 = origin=(x=0, y=0) size=(width=320, height=568)        
(lldb) p (int)[[self.view subviews] count]  
(int) $0 = 3
</code></pre>

<hr />

<h1>chisel</h1>

<p>Facebook 团队编写了一份基于LLDB的扩展插件<a href="https://github.com/facebook/chisel#custom-commands">Chisel</a>，并且开源了。我们一起来配置一下吧。         <br/>
安装的话，很简单。就利用homebrew来安装chisel即可。</p>

<pre><code>brew install chisel
</code></pre>

<p>安装显示如下：
<img src="../images/image_source/chisel_2.jpeg" alt="" /></p>

<p>根据警告提示，需要把标注的部分文字加到~/.lldbinit文件里面:</p>

<pre><code>//可以cd ~ , ls -l查看一下是否有 .lldbinit

vim ~/.lldbinit
//将下面的文字加进去。
command script import /usr/local/Cellar/chisel/1.0.0/libexec/fblldb.py
然后:wq保存一下
</code></pre>

<p>这样就ok啦。</p>

<p>如果你奇怪为什么要修改.lldbinit，可以去官网搜一下，关于这个文件的介绍：<a href="http://lldb.llvm.org/tutorial.html">http://lldb.llvm.org/tutorial.html</a>，查找关键字lldbinit即可。</p>

<p>利用help命令，查看chisel所支持的命令。也可以利用help查看具体的某条命令的详细说明。</p>

<p>例如：有时候，我们想查看一下视图的位置，但很多视图摞在一起，背景色又一样，不好区分。我们在lldb命令模式下输入 help border看一下。这时，会有如下输出：</p>

<pre><code>(lldb) help border
Draws a border around &lt;viewOrLayer&gt;. Color and width can be optionally provided.

Arguments:
  &lt;viewOrLayer&gt;; Type: UIView/CALayer *; The view/layer to border.

Options:
  --color/-c &lt;color&gt;; Type: string; A color name such as 'red', 'green', 'magenta', etc.
  --width/-w &lt;width&gt;; Type: CGFloat; Desired width of border.

Syntax: border [--color=color] [--width=width] &lt;viewOrLayer&gt;
</code></pre>

<p>如上面所说Draws a border around view。border命令可以动态改变 指定的view或者Layer边框颜色和宽度。只要输入指定参数即可。在某个viewController下面，可以尝试输入：</p>

<pre><code>border -c red [self view]
</code></pre>

<p>这样接着运行，当前的view边框的颜色就会变为红色了。可以很清晰的看清view的边界。很给力吧，这样省去了模糊不清的颜色混合层。当然，界面复杂的话，我们也可以借助工具reveal来查看。别的不在举例了，我们可以直接借助help命令来了解。如 help pviews等等。
这里有一个表格</p>

<p><img src="../images/image_source/chisel_1.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-c中的'@']]></title>
    <link href="http://MrBoog.github.io/blog/2014/04/13/objective-czhong-de-at/"/>
    <updated>2014-04-13T13:56:34+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/04/13/objective-czhong-de-at</id>
    <content type="html"><![CDATA[<p>在学习和使用Objective-c语言的时候，我们随处可见&#8217;@&lsquo;符号，这和其他语言有很大不同。</p>

<p>由于c、c++本身没有&#8217;@&lsquo;，Oc这样设计可能是为了更好地和c、c++混编。正如<a href="http://stackoverflow.com/a/25784">这篇文章</a>所提到的。不过&rsquo;@&lsquo;的用途多种多样，我感觉还是需要整理一下。</p>

<p>网上Steffen Itterheim的<a href="http://www.learn-cocos2d.com/2011/10/complete-list-objectivec-20-compiler-directives/">这篇文章</a>基本把大部分用到&#8217;@&lsquo;的部分罗列了。</p>

<ul>
<li>@class</li>
<li>@defs</li>
<li>@protocol @required @optional @end</li>
<li>@interface @public @package @protected @private @property @end</li>
<li>@implementation @synthesize @dynamic @end</li>
<li>@throw @try @catch @finally</li>
<li>@synchronized @autoreleasepool</li>
<li>@selector @encode</li>
<li>@compatibility_alias  （给某个类起别名）</li>
<li>@&ldquo;string&rdquo;</li>
<li>@&lsquo;a&rsquo;  @1  @YES</li>
<li>@[]</li>
<li>@{}</li>
<li>@()</li>
</ul>


<p>以上涉及的这些，有的十分常见，也有的我们可能这辈子都用不到。下面，我们就给几个不常见的，或者比较重要的并且容易忽视的用法，总结一下。</p>

<p>1 @compatibility_alias</p>

<p>关于@compatibility_alias的用法，Mattt Thompson大大举过很好的<a href="http://nshipster.com/at-compiler-directives/">示例</a>。在iOS5下想使用collectionView的效果，无疑<a href="https://github.com/ptshih/PSCollectionView">PSTCollectionView</a> 是最佳的替代方案，下面的代码，可以为PSTCollectView起个别名。这样在iOS5我们也可以制造出使用UICollectionView的幻觉，重点是以后升级可以省去很多麻烦：</p>

<pre><code>    #if __IPHONE_OS_VERSION_MAX_ALLOWED &lt; 60000 
    @compatibility_alias UICollectionViewController PSTCollectionViewController;        
    @compatibility_alias UICollectionView PSTCollectionView;    
    @compatibility_alias UICollectionReusableView PSTCollectionReusableView;    
    @compatibility_alias UICollectionViewCell PSTCollectionViewCell;    
    @compatibility_alias UICollectionViewLayout PSTCollectionViewLayout;    
    @compatibility_alias UICollectionViewFlowLayout PSTCollectionViewFlowLayout;    
    @compatibility_alias UICollectionViewLayoutAttributes     PSTCollectionViewLayoutAttributes;        
    @protocol UICollectionViewDataSource &lt;PSTCollectionViewDataSource&gt; @end     
    @protocol UICollectionViewDelegate &lt;PSTCollectionViewDelegate&gt; @end             
 #endif 
</code></pre>

<p>2 Object Literals</p>

<p> 2012年苹果加入了如下字面值，简化了代码。</p>

<p> NSArray Literal： @[ ]</p>

<pre><code>    NSArray * array = @[ @1, @"b", @YES];       
    id str = array[0];      
</code></pre>

<p> NSDictionary Literal:  @{ }</p>

<pre><code>    NSDictionary * dict = @{ @"key1" : @"obj1", @"key2" : @"obj2"}; 
    id obj1 = dict[@"key1"];        
</code></pre>

<p> NSNumber Literal:</p>

<pre><code>    NSNumber * number = @'a';//([NSNumber numberWithChar:'a'])          
    NSNumber * number = @1;//([NSNumber numberWithInt:1])       
    NSNumber * number   = @12ll;//([NSNumber numberWithLongLong:12ll])
    NSNumber * number   = @12ul;//([NSNumber numberWithUnsignedLong:12ul])  
    NSNumber * number   = @12.3f;//([NSNumber numberWithFloat:12.3f])   
    NSNumber * number = @YES;//([NSNumber numberWithBool:YES])      
</code></pre>

<p>NSSet Literal:    <br/>
以上应该大部分集合类的literal都有了，不过类似的NSSet Literal还没有提供。        <br/>
我们可以用数组初始化的方式:</p>

<pre><code>NSSet * set = [NSSet setWithArray:@[@"yes",@YES]];
</code></pre>

<p>当然我们也可以通过自己宏定义来实现：</p>

<pre><code> #define $(...)  [[NSSet alloc] initWithObjects:__VA_ARGS__, nil]   
  //或者          
 #define $(...)  [NSSet setWithObjects:__VA_ARGS__, nil]        
 //这样就可以用了:       
 NSSet *set = $(@"hello",@"world",@"!");        
</code></pre>

<p>Expressions:@( )</p>

<p>@( )，会动态评估里面的表达式。返回值：计算后的表达式值的对象常量。如</p>

<pre><code>[@("hello word") class] //返回类型 NSString     
[@(77 - 88) class] //返回类型 NSNumber。
</code></pre>

<p>3 @encode         <br/>
返回一个的char *类型的类型编码,<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">苹果官方文档有介绍</a>     <br/>
const char * objCType = @encode(float);       <br/>
printf(&ldquo;%s&rdquo;,objCType);</p>

<p>4 @defs</p>

<p>我们都知道，Oc的类是在c语言的结构体的基础上建立起来的。@defsd会返回Objective-C类相同的布局，例如下述代码，会得到一个相同结构的结构体。</p>

<pre><code>struct cStructure   
{   
@defs(NSObject);    
} *cStruct;     
</code></pre>

<p>不过，如果你现在尝试如上代码，你会得到：@defs is not support on this platform now 或者 @defs is no longer supported in new ABI(Application Binary Interface)的错误。因为大概xcode3.2后我们就已经无法在现在的Objective-C中使用它了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS下配置php环境测试推送]]></title>
    <link href="http://MrBoog.github.io/blog/2014/03/30/push/"/>
    <updated>2014-03-30T16:29:11+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/03/30/push</id>
    <content type="html"><![CDATA[<h3>首先在Mac下配置php环境</h3>

<p>在iOS开发中，有时候我们经常要测试APNS推送的部分，我们可以本地自己搭建推送的环境，这样自己测试起来也能提高效率。目前有很多类似的开源项目，比如<a href="https://github.com/stefanhafeneger/PushMeBaby">pushmebaby</a>,<a href="https://github.com/blommegard/APNS-Pusher">APNS-Pusher</a>。本文适合喜欢自己在本地折腾的同学。</p>

<h5>启动Mac的Apache服务。</h5>

<ol>
<li><p>如果您还是10.7的用户，只需要在<code>系统偏好设置--&gt;共享</code>中勾选<code>web共享</code>即可:
<img src="../images/image_source/apns_1.png" alt="" /><br/>
<img src="../images/image_source/apns_3.png" alt="" /><br/>
浏览器中输入<code>localhost/~[用户名]</code>，就可以直接访问<code>/Users/[用户名]/Sites</code> 目录.</p></li>
<li><p>对于10.8或10.9的用户运行apache服务，需要通过terminal手动开启, 输入下述命令开启服务<br/>
<code>sudo apachectl start</code>  <br/>
这样就可以了，浏览器中输入:&ldquo;localhost&rdquo;,应该能看到&#8221;It works&#8221;的字样. <br/>
<img src="../images/image_source/apns_5.png" alt="" /> <br/>
cd /,到根目录下，在根目录的Library/WebServer/Documents/里面就是我们访问的地方.</p></li>
</ol>


<h5>开启PHP服务</h5>

<ol>
<li>在终端中运行<code>sudo vi /etc/apache2/httpd.conf</code>，打开Apache的配置文件。</li>
<li>找到“#LoadModule php5_module libexec/apache2/libphp5.so”，把前面的#号去掉。然后:wq保存。</li>
<li>运行<code>sudo apachectl restart</code>，重启Apache。ok，到这里PHP就可以用了。</li>
<li>运行<code>cp /Library/WebServer/Documents/index.html.en /Library/WebServer/Documents/info.php</code>。即在Apache的根目录下复制index.html.en文件并重命名为info.php。</li>
<li>在终端中运行<code>vi /Library/WebServer/Document/info.php</code>，这样就可以在vi中编辑info.php文件了。在“It’s works!”后面加上“&lt;?php phpinfo(); ?>”，然后保存之。这样就可以在<code>http://localhost/info.php</code>，中看到有关PHP的信息，比如版本号是5.3.26。<br/>
<img src="../images/image_source/apns_6.png" alt="" /></li>
</ol>


<h5>php推送</h5>

<p>上述部分都完成后，就可以写php，来实现推送功能了。相关php代码可到<a href="https://github.com/MrBoog/push">这里</a>去下载。将push文件夹放置于Library/WebServer/Documents/目录下，访问<code>http://localhost/push/apns_form.php</code>，测试的时候替换Library/WebServer/Documents/push/目录下的证书apns_dev.pem与apns_pro.pem即可。 <br/>
<img src="../images/image_source/apns_7.png" alt="" /></p>

<hr />

<p>由于10.7之后，系统没有自带用户级的web目录~/Sites，我们目前的操作都是在系统级的根目录下进行的：</p>

<p>/Library/WebServer/Documents/</p>

<p>当然我们也可以在</p>

<p>/Users/mac/Sites</p>

<p>目录下建立用户级的Sites，命令如下：</p>

<pre><code> sudo mkdir ~/Sites
</code></pre>

<p>检查下面这个文件夹下面，有没有 “username”.conf文件，我的名字是mac，</p>

<p><img src="../images/image_source/apns_8.png" alt="" /></p>

<p>如果没有的话就创建一个，</p>

<pre><code> sudo vi /etc/apache2/users/"username".conf
</code></pre>

<p>用vi打开后，将下面这里username替换成自己的，并复制进去，然后:wq保存。</p>

<pre><code> &lt;Directory "/Users/'username'/Sites/"&gt;   
 Options Indexes MultiViews  
 AllowOverride All  
 Order allow,deny  
 Allow from all    
 &lt;/Directory&gt;
</code></pre>

<p>保存后分配相应权限，然后重启Apache。</p>

<pre><code> sudo chmod 755 /etc/apache2/users/你的用户名.conf  
 sudo apachectl restart
</code></pre>

<p>到此，访问<code>http://localhost/~'username'</code>试试看，我们也可以访问用户级站点了。</p>
]]></content>
  </entry>
  
</feed>

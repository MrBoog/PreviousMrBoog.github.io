<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HuanLiu's Blog]]></title>
  <link href="http://MrBoog.github.io/atom.xml" rel="self"/>
  <link href="http://MrBoog.github.io/"/>
  <updated>2014-04-13T18:38:16+08:00</updated>
  <id>http://MrBoog.github.io/</id>
  <author>
    <name><![CDATA[HuanLiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-c中的'@']]></title>
    <link href="http://MrBoog.github.io/blog/2014/04/13/objective-czhong-de-at/"/>
    <updated>2014-04-13T13:56:34+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/04/13/objective-czhong-de-at</id>
    <content type="html"><![CDATA[<p>在学习和使用Objective-c语言的时候，我们随处可见&#8217;@&lsquo;符号，这和其他语言有很大不同。</p>

<p>由于c、c++本身没有&#8217;@&lsquo;，Oc这样设计可能是为了更好地和c、c++混编。正如<a href="http://stackoverflow.com/a/25784">这篇文章</a>所提到的。不过&rsquo;@&lsquo;的用途多种多样，我们还是需要整理一下。</p>

<p>网上Steffen Itterheim的<a href="http://www.learn-cocos2d.com/2011/10/complete-list-objectivec-20-compiler-directives/">这篇文章</a>基本把大部分用到&#8217;@&lsquo;的部分罗列了。</p>

<ul>
<li>@class</li>
<li>@defs</li>
<li>@protocol @required @optional @end</li>
<li>@interface @public @package @protected @private @property @end</li>
<li>@implementation @synthesize @dynamic @end</li>
<li>@throw @try @catch @finally</li>
<li>@synchronized @autoreleasepool</li>
<li>@selector @encode</li>
<li>@compatibility_alias  （给某个类起别名）</li>
<li>@&ldquo;string&rdquo;</li>
<li>@&lsquo;a&rsquo;  @1  @YES</li>
<li>@[]</li>
<li>@{}</li>
<li>@()</li>
</ul>


<p>以上涉及大部分比较基础，不再多说，我们简单地讨论一下几个不太常见的用法。</p>

<p>1 @compatibility_alias</p>

<blockquote><p>关于@compatibility_alias的用法，Mattt Thompson大大举过很好的<a href="http://nshipster.com/at-compiler-directives/">示例</a>。在iOS5下想使用collectionView的效果，无疑<a href="https://github.com/ptshih/PSCollectionView">PSTCollectionView</a> 是最佳的替代方案，下面的代码，可以为PSTCollectView起个别名。这样在iOS5我们也可以制造出使用UICollectionView的幻觉，重点是以后升级可以省去很多麻烦：  <br/>
 #if __IPHONE_OS_VERSION_MAX_ALLOWED &lt; 60000  <br/>
@compatibility_alias UICollectionViewController PSTCollectionViewController;      <br/>
@compatibility_alias UICollectionView PSTCollectionView;  <br/>
@compatibility_alias UICollectionReusableView PSTCollectionReusableView;  <br/>
@compatibility_alias UICollectionViewCell PSTCollectionViewCell;  <br/>
@compatibility_alias UICollectionViewLayout PSTCollectionViewLayout;  <br/>
@compatibility_alias UICollectionViewFlowLayout PSTCollectionViewFlowLayout;  <br/>
@compatibility_alias UICollectionViewLayoutAttributes     PSTCollectionViewLayoutAttributes;      <br/>
@protocol UICollectionViewDataSource <PSTCollectionViewDataSource> @end   <br/>
@protocol UICollectionViewDelegate <PSTCollectionViewDelegate> @end           <br/>
 #endif</p></blockquote>

<p>2 Object Literals</p>

<blockquote><p>NSArray Literal：  <br/>
NSArray * array = @[ @1, @&ldquo;b&rdquo;, @YES];   <br/>
id str = array[0];      <br/>
NSDictionary Literal:       <br/>
NSDictionary * dict = @{ @&ldquo;key1&rdquo; : @&ldquo;obj1&rdquo;, @&ldquo;key2&rdquo; : @&ldquo;obj2&rdquo;}; <br/>
id obj1 = dict[@&ldquo;key1&rdquo;];            <br/>
NSNumber Literal:           <br/>
NSNumber * number = @&lsquo;a&rsquo;;//([NSNumber numberWithChar:&lsquo;a&rsquo;])          <br/>
NSNumber * number = @1;//([NSNumber numberWithInt:1])   <br/>
NSNumber * number     = @12ll;//([NSNumber numberWithLongLong:12ll])
NSNumber * number = @12ul;//([NSNumber numberWithUnsignedLong:12ul])<br/>
NSNumber * number = @12.3f;//([NSNumber numberWithFloat:12.3f]) <br/>
NSNumber * number = @YES;//([NSNumber numberWithBool:YES])</p></blockquote>

<p>NSSet Literal:    <br/>
以上应该大部分集合类的literal都有了，不过类似的NSSet Literal还没有提供。</p>

<blockquote><p>可以用数组初始化的方式:
NSSet * set = [NSSet setWithArray:@[@&ldquo;yes&rdquo;,@YES]];</p></blockquote>

<p>当然我们也可以通过自己宏定义来实现：</p>

<blockquote><p> #define $(&hellip;)  [[NSSet alloc] initWithObjects:<strong>VA_ARGS</strong>, nil] <br/>
 或者       <br/>
 #define $(&hellip;)  [NSSet setWithObjects:<strong>VA_ARGS</strong>, nil]</p>

<p> NSSet *set = $(@&ldquo;hello&rdquo;,@&ldquo;world&rdquo;,@&ldquo;!&rdquo;);</p></blockquote>

<p>3 @defs</p>

<blockquote><p>我们都知道，Oc的类是在c语言的结构体的基础上建立起来的。@defsd会返回Objective-C类相同的布局，例如下述代码，会得到一个相同结构的结构体。</p>

<p>struct cStructure<br/>
{</p>

<pre><code>@defs(NSObject);    
</code></pre>

<p>} *cStruct;       <br/>
不过，如果你现在尝试如上代码，你会得到：@defs is not support on this platform now 或者 @defs is no longer supported in new ABI(Application Binary Interface)的错误。因为大概xcode3.2后我们就已经无法在现在的Objective-C中使用它了。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreGraphics]]></title>
    <link href="http://MrBoog.github.io/blog/2014/04/12/coregraphics/"/>
    <updated>2014-04-12T21:54:18+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/04/12/coregraphics</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS下配置php环境测试推送]]></title>
    <link href="http://MrBoog.github.io/blog/2014/03/30/test-again/"/>
    <updated>2014-03-30T16:29:11+08:00</updated>
    <id>http://MrBoog.github.io/blog/2014/03/30/test-again</id>
    <content type="html"><![CDATA[<h3>首先在Mac下配置php环境</h3>

<p>在iOS开发中，有时候我们经常要测试APNS推送的部分，我们可以本地自己搭建推送的环境，这样自己测试起来也能提高效率。目前有很多类似的开源项目，比如<a href="https://github.com/stefanhafeneger/PushMeBaby">pushmebaby</a>,<a href="https://github.com/blommegard/APNS-Pusher">APNS-Pusher</a>。本文适合喜欢自己在本地折腾的同学。</p>

<h5>启动Mac的Apache服务。</h5>

<ol>
<li><p>如果您还是10.7的用户，只需要在<code>系统偏好设置--&gt;共享</code>中勾选<code>web共享</code>即可:
<img src="../images/image_source/apns_1.png" alt="" /><br/>
<img src="../images/image_source/apns_3.png" alt="" /><br/>
浏览器中输入<code>localhost/~[用户名]</code>，就可以直接访问<code>/Users/[用户名]/Sites</code> 目录.</p></li>
<li><p>对于10.8或10.9的用户运行apache服务，需要通过terminal手动开启, 输入下述命令开启服务<br/>
<code>sudo apachectl start</code>  <br/>
这样就可以了，浏览器中输入:&ldquo;localhost&rdquo;,应该能看到&#8221;It works&#8221;的字样. <br/>
<img src="../images/image_source/apns_5.png" alt="" /> <br/>
cd /,到根目录下，在根目录的Library/WebServer/Documents/里面就是我们访问的地方.</p></li>
</ol>


<h5>开启PHP服务</h5>

<ol>
<li>在终端中运行<code>sudo vi /etc/apache2/httpd.conf</code>，打开Apache的配置文件。</li>
<li>找到“#LoadModule php5_module libexec/apache2/libphp5.so”，把前面的#号去掉。然后:wq保存。</li>
<li>运行<code>sudo apachectl restart</code>，重启Apache。ok，到这里PHP就可以用了。</li>
<li>运行<code>cp /Library/WebServer/Documents/index.html.en /Library/WebServer/Documents/info.php</code>。即在Apache的根目录下复制index.html.en文件并重命名为info.php。</li>
<li>在终端中运行<code>vi /Library/WebServer/Document/info.php</code>，这样就可以在vi中编辑info.php文件了。在“It’s works!”后面加上“&lt;?php phpinfo(); ?>”，然后保存之。这样就可以在<code>http://localhost/info.php</code>，中看到有关PHP的信息，比如版本号是5.3.26。<br/>
<img src="../images/image_source/apns_6.png" alt="" /></li>
</ol>


<h5>php推送</h5>

<p>上述部分都完成后，就可以写php，来实现推送功能了。相关php代码可到<a href="https://github.com/MrBoog/push">这里</a>去下载。将push文件夹放置于Library/WebServer/Documents/目录下，访问<code>http://localhost/push/apns_form.php</code>，测试的时候替换Library/WebServer/Documents/push/目录下的证书apns_dev.pem与apns_pro.pem即可。 <br/>
<img src="../images/image_source/apns_7.png" alt="" /></p>

<hr />

<p>由于10.7之后，系统没有自带用户级的web目录~/Sites，我们目前的操作都是在系统级的根目录下进行的：</p>

<p>/Library/WebServer/Documents/</p>

<p>当然我们也可以在</p>

<p>/Users/mac/Sites</p>

<p>目录下建立用户级的Sites，命令如下：</p>

<blockquote><p>sudo mkdir ~/Sites</p></blockquote>

<p>检查下面这个文件夹下面，有没有 “username”.conf文件，我的名字是mac，</p>

<p><img src="../images/image_source/apns_8.png" alt="" /></p>

<p>如果没有的话就创建一个，</p>

<blockquote><p>sudo vi /etc/apache2/users/&ldquo;username&rdquo;.conf</p></blockquote>

<p>用vi打开后，将下面这里username替换成自己的，并复制进去，然后:wq保存。</p>

<blockquote><p>&lt; Directory &ldquo;/Users/&lsquo;username&rsquo;/Sites/&rdquo;> <br/>
 Options Indexes MultiViews<br/>
 AllowOverride All<br/>
 Order allow,deny<br/>
 Allow from all  <br/>
 &lt; /Directory></p></blockquote>

<p>保存后分配相应权限，然后重启Apache。</p>

<blockquote><p>sudo chmod 755 /etc/apache2/users/你的用户名.conf<br/>
sudo apachectl restart</p></blockquote>

<p>到此，访问<code>http://localhost/~'username'</code>试试看，我们也可以访问用户级站点了。</p>
]]></content>
  </entry>
  
</feed>
